{
  "name": "Spend IP",
  "type": "script",
  "author": "LWBSOic5NKC2pZDV",
  "img": null,
  "scope": "global",
  "command": "// Get selected tokens\nconst allTokens = canvas.tokens.controlled;\n\nif (allTokens.length === 0) {\n  return ui.notifications.warn(\"You don't have any token selected.\");\n}\n\n// Assuming the first selected token is the player character\nconst token = allTokens[0];\nconst actor = token.actor;\n\n// Get the character's Improvement Points\nlet improvementPoints = actor.system.improvementPoints?.value || 0;\n\n// Define the costs based on skill levels and role abilities\nconst costMap = {\n  typical: [20, 40, 60, 80, 100, 120, 140, 160, 180, 200],\n  difficult: [40, 80, 120, 160, 200, 240, 280, 320, 360, 400],\n  roleAbility: [60, 120, 180, 240, 300, 360, 420, 480, 540, 600],\n};\n\n// List of difficult skills\nconst difficultSkills = [\n  \"Pilot Air Vehicle\",\n  \"Martial Arts\",\n  \"Autofire\",\n  \"Heavy Weapons\",\n  \"Demolitions\",\n  \"Electronics/Security Tech\",\n  \"Paramedic\",\n];\n\n// Role and Role Ability Mapping\nconst roleAbilitiesMapping = {\n  exec: \"Teamwork\",\n  fixer: \"Operator\",\n  lawman: \"Backup\",\n  media: \"Credibility\",\n  medtech: \"Medicine\",\n  netrunner: \"Interface\",\n  nomad: \"Moto\",\n  rockerboy: \"Charismatic Impact\",\n  solo: \"Combat Awareness\",\n  tech: \"Maker\",\n};\n\n// Manual Descriptions for Skills, Role Abilities, and Sub-Abilities\nconst manualDescriptions = {\n  Athletics:\n    \"Skill for feats of physical agility: climbing, jumping, and running.\",\n  Concentration: \"Mind control: focus, memory, and ignoring distractions.\",\n  \"Conceal/Reveal Object\": \"Hide and find stashed or hidden items.\",\n  \"Lip Reading\": \"Decode spoken words through lip movements.\",\n  Perception: \"Detect clues, hidden people, or traps.\",\n  Tracking: \"Follow a trail, track clues left behind.\",\n  Contortionist: \"Bend, twist, and escape from restraints.\",\n  Dance: \"Dance like a pro on any stage.\",\n  Endurance: \"Withstand physical hardship and harsh conditions.\",\n  \"Resist Torture/Drugs\": \"Survive torture, drugs, and pain.\",\n  Stealth: \"Move unseen, hide, and act discreetly.\",\n  \"Drive Land Vehicle\": \"Command cars, trucks, and more on land.\",\n  \"Pilot Air Vehicle\": \"Rule the skies; fly and maneuver aircraft.\",\n  \"Pilot Sea Vehicle\": \"Captain of the seas; pilot all watercraft.\",\n  Riding: \"Ride trained creatures with control.\",\n  Accounting: \"Numbers and fraud: balance books, make budgets.\",\n  \"Animal Handling\": \"Control, train, and care for animals.\",\n  Bureaucracy: \"Navigate red tape; get intel, avoid the line.\",\n  Business: \"Supply, demand, sales, and corporate strategy.\",\n  Composition: \"Write lyrics, stories, or articles.\",\n  Criminology: \"Detective work: find clues, decode evidence.\",\n  Cryptography: \"Encrypt, decode, and hide data.\",\n  Deduction: \"See beyond; make leaps from small clues.\",\n  Education: \"Basic knowledge of reading, math, and history.\",\n  Gamble: \"Play the odds, win big in games of chance.\",\n  Language: \"Speak an additional language fluently.\",\n  \"Library Search\": \"Find facts in databases and archives.\",\n  \"Local Expert\": \"Knowledge of local scenes, people, and secrets.\",\n  Science: \"Academia skills; experiment and analyze.\",\n  Tactics: \"Plan and control large-scale combat.\",\n  \"Wilderness Survival\": \"Survive off the grid in the wilds.\",\n  Brawling: \"Unarmed combat: fists, kicks, and grapples.\",\n  Evasion: \"Dodge melee and ranged attacks.\",\n  \"Martial Arts\": \"Trained in specific martial arts forms.\",\n  \"Melee Weapon\": \"Proficiency with blades, clubs, and more.\",\n  Acting: \"Take on roles, deceive, and influence.\",\n  \"Play Instrument\": \"Master any instrument, from guitar to violin.\",\n  Archery: \"Precision with bow-and-arrow weaponry.\",\n  Autofire: \"Keep automatic fire on target.\",\n  Handgun: \"Expert with pistols and small firearms.\",\n  \"Heavy Weapons\": \"Control large weapons like rockets.\",\n  \"Shoulder Arms\": \"Handle rifles, shotguns, and shoulder-fired weapons.\",\n  Bribery: \"Know when, who, and how much to bribe.\",\n  Conversation: \"Extract info without raising suspicion.\",\n  \"Human Perception\": \"Read expressions and body language.\",\n  Interrogation: \"Get answers, willingly or otherwise.\",\n  Persuasion: \"Convince, sway, and influence.\",\n  \"Personal Grooming\": \"Look your best, influence perceptions.\",\n  Streetwise: \"Find contraband and survive the streets.\",\n  Trading: \"Make deals, barter, and haggle.\",\n  \"Wardrobe & Style\": \"Dress to impress or blend in.\",\n  \"Air Vehicle Tech\": \"Fix and maintain flying machines.\",\n  \"Basic Tech\": \"Repair basic tech, electronics, and mechanics.\",\n  Cybertech: \"Diagnose and repair cyberware.\",\n  Demolitions: \"Set explosives and avoid traps.\",\n  \"Electronics/Security Tech\": \"Crack, install, or disable complex systems.\",\n  \"First Aid\": \"Stabilize the wounded; stop the bleeding.\",\n  Forgery: \"Create and detect counterfeit documents.\",\n  \"Land Vehicle Tech\": \"Repair ground-based vehicles.\",\n  \"Paint/Draw/Sculpt\": \"Create visual art at a professional level.\",\n  Paramedic: \"Advanced care for critical injuries.\",\n  \"Photography/Film\": \"Capture images, film, and braindances.\",\n  \"Pick Lock\": \"Bypass locks and get access.\",\n  \"Pick Pocket\": \"Steal from others, unseen.\",\n  \"Sea Vehicle Tech\": \"Maintain watercraft, from boats to subs.\",\n  Weaponstech: \"Maintain, repair, and upgrade weapons.\",\n  \"Charismatic Impact\": \"Rockerboys sway others with sheer presence.\",\n  \"Damage Deflection\": \"Roll with hits to reduce damage.\",\n  \"Fumble Recovery\": \"Recover from failed attacks, unfazed.\",\n  \"Initiative Reaction\": \"Quick reflexes add speed in combat.\",\n  \"Precision Attack\": \"Aim with accuracy, improving hit chances.\",\n  \"Spot Weakness\": \"Find weak points, increase damage.\",\n  \"Threat Detection\": \"Heightened awareness boosts perception.\",\n  Interface: \"Netrunners use Interface to hack and control.\",\n  Credibility: \"The Media’s influence grows with their reach.\",\n  Moto: \"Nomads excel in vehicles and combat tactics.\",\n  \"Field Expertise\": \"Repair anything in-field, any time.\",\n  \"Upgrade Expertise\": \"Upgrade gear for enhanced performance.\",\n  \"Fabrication Expertise\": \"Create items from raw materials.\",\n  \"Invention Expertise\": \"Design and invent new tech.\",\n  Surgery: \"Operate on severe injuries and install cyberware.\",\n  \"Medical Tech (Cryosystem Operation)\": \"Operate cryotech to preserve lives.\",\n  \"Medical Tech (Pharmaceuticals)\": \"Synthesize meds from raw materials.\",\n  \"Medical Tech\": \"Perform medical treatments and surgeries.\",\n  Teamwork: \"Build a team to achieve corporate goals.\",\n  Backup: \"Lawmen summon reinforcements on demand.\",\n  \"Combat Awareness\": \"Assess threats and optimize tactics.\",\n  Medicine: \"Medtechs treat wounds and save lives.\",\n  Maker: \"Create, repair, and innovate tech.\",\n  Operator: \"Fixers connect and navigate the black market.\",\n};\n\n// Unique Icons for Each Skill/Ability\nconst uniqueIcons = {\n  Athletics: \"fas fa-running\",\n  Concentration: \"fas fa-brain\",\n  \"Conceal/Reveal Object\": \"fas fa-eye-slash\",\n  \"Lip Reading\": \"fas fa-lips\",\n  Perception: \"fas fa-eye\",\n  Tracking: \"fas fa-shoe-prints\",\n  Contortionist: \"fas fa-child\",\n  Dance: \"fas fa-music\",\n  Endurance: \"fas fa-heartbeat\",\n  \"Resist Torture/Drugs\": \"fas fa-syringe\",\n  Stealth: \"fas fa-user-secret\",\n  \"Drive Land Vehicle\": \"fas fa-car\",\n  \"Pilot Air Vehicle\": \"fas fa-plane\",\n  \"Pilot Sea Vehicle\": \"fas fa-ship\",\n  Riding: \"fas fa-horse\",\n  Accounting: \"fas fa-calculator\",\n  \"Animal Handling\": \"fas fa-paw\",\n  Bureaucracy: \"fas fa-building\",\n  Business: \"fas fa-chart-line\",\n  Composition: \"fas fa-pencil-alt\",\n  Criminology: \"fas fa-search\",\n  Cryptography: \"fas fa-lock\",\n  Deduction: \"fas fa-lightbulb\",\n  Education: \"fas fa-book\",\n  Gamble: \"fas fa-dice\",\n  Language: \"fas fa-globe\",\n  \"Library Search\": \"fas fa-search\",\n  \"Local Expert\": \"fas fa-map-marker-alt\",\n  Science: \"fas fa-flask\",\n  Tactics: \"fas fa-chess\",\n  \"Wilderness Survival\": \"fas fa-tree\",\n  Brawling: \"fas fa-hand-rock\",\n  Evasion: \"fas fa-person-running\",\n  \"Martial Arts\": \"fas fa-fist-raised\",\n  \"Melee Weapon\": \"fas fa-gavel\",\n  Acting: \"fas fa-theater-masks\",\n  \"Play Instrument\": \"fas fa-guitar\",\n  Archery: \"fas fa-bullseye\",\n  Autofire: \"fas fa-fire-alt\",\n  Handgun: \"fas fa-hand-point-right\",\n  \"Heavy Weapons\": \"fas fa-bomb\",\n  \"Shoulder Arms\": \"fas fa-crosshairs\",\n  Bribery: \"fas fa-money-bill-wave\",\n  Conversation: \"fas fa-comments\",\n  \"Human Perception\": \"fas fa-user-check\",\n  Interrogation: \"fas fa-gavel\",\n  Persuasion: \"fas fa-handshake\",\n  \"Personal Grooming\": \"fas fa-spa\",\n  Streetwise: \"fas fa-street-view\",\n  Trading: \"fas fa-exchange-alt\",\n  \"Wardrobe & Style\": \"fas fa-tshirt\",\n  \"Air Vehicle Tech\": \"fas fa-wrench\",\n  \"Basic Tech\": \"fas fa-cogs\",\n  Cybertech: \"fas fa-microchip\",\n  Demolitions: \"fas fa-explosion\",\n  \"Electronics/Security Tech\": \"fas fa-laptop-code\",\n  \"First Aid\": \"fas fa-first-aid\",\n  Forgery: \"fas fa-file-signature\",\n  \"Land Vehicle Tech\": \"fas fa-tools\",\n  \"Paint/Draw/Sculpt\": \"fas fa-palette\",\n  Paramedic: \"fas fa-ambulance\",\n  \"Photography/Film\": \"fas fa-camera\",\n  \"Pick Lock\": \"fas fa-key\",\n  \"Pick Pocket\": \"fas fa-hand-holding\",\n  \"Sea Vehicle Tech\": \"fas fa-anchor\",\n  Weaponstech: \"fas fa-crosshairs\",\n  \"Charismatic Impact\": \"fas fa-microphone-alt\",\n  \"Damage Deflection\": \"fas fa-shield-alt\",\n  \"Fumble Recovery\": \"fas fa-undo-alt\",\n  \"Initiative Reaction\": \"fas fa-bolt\",\n  \"Precision Attack\": \"fas fa-bullseye\",\n  \"Spot Weakness\": \"fas fa-crosshairs\",\n  \"Threat Detection\": \"fas fa-exclamation-circle\",\n  Interface: \"fas fa-network-wired\",\n  Credibility: \"fas fa-bullhorn\",\n  Moto: \"fas fa-motorcycle\",\n  \"Field Expertise\": \"fas fa-hard-hat\",\n  \"Upgrade Expertise\": \"fas fa-arrow-circle-up\",\n  \"Fabrication Expertise\": \"fas fa-hammer\",\n  \"Invention Expertise\": \"fas fa-lightbulb\",\n  Surgery: \"fas fa-user-md\",\n  \"Medical Tech (Cryosystem Operation)\": \"fas fa-thermometer-half\",\n  \"Medical Tech (Pharmaceuticals)\": \"fas fa-pills\",\n  \"Medical Tech\": \"fas fa-stethoscope\",\n  Teamwork: \"fas fa-users\",\n  Backup: \"fas fa-shield-alt\",\n  \"Combat Awareness\": \"fas fa-crosshairs\",\n  Medicine: \"fas fa-first-aid\",\n  Maker: \"fas fa-tools\",\n  Operator: \"fas fa-briefcase\",\n};\n\n// Categories of skills\nconst skillCategories = {\n  \"Awareness Skills\": [\n    \"Conceal/Reveal Object\",\n    \"Concentration\",\n    \"Lip Reading\",\n    \"Perception\",\n    \"Tracking\",\n  ],\n  \"Body Skills\": [\n    \"Athletics\",\n    \"Contortionist\",\n    \"Dance\",\n    \"Endurance\",\n    \"Resist Torture/Drugs\",\n    \"Stealth\",\n  ],\n  \"Control Skills\": [\n    \"Drive Land Vehicle\",\n    \"Pilot Air Vehicle\",\n    \"Pilot Sea Vehicle\",\n    \"Riding\",\n  ],\n  \"Education Skills\": [\n    \"Accounting\",\n    \"Animal Handling\",\n    \"Bureaucracy\",\n    \"Business\",\n    \"Composition\",\n    \"Criminology\",\n    \"Cryptography\",\n    \"Deduction\",\n    \"Education\",\n    \"Gamble\",\n    \"Language(s)\",\n    \"Library Search\",\n    \"Local Expert (s)\",\n    \"Science\",\n    \"Tactics\",\n    \"Wilderness Survival\",\n  ],\n  \"Fighting Skills\": [\"Brawling\", \"Evasion\", \"Martial Arts\", \"Melee Weapon\"],\n  \"Performance Skills\": [\"Acting\", \"Play Instrument\"],\n  \"Ranged Weapon Skills\": [\n    \"Archery\",\n    \"Autofire\",\n    \"Handgun\",\n    \"Heavy Weapons\",\n    \"Shoulder Arms\",\n  ],\n  \"Social Skills\": [\n    \"Bribery\",\n    \"Conversation\",\n    \"Human Perception\",\n    \"Interrogation\",\n    \"Personal Grooming\",\n    \"Persuasion\",\n    \"Streetwise\",\n    \"Trading\",\n    \"Wardrobe & Style\",\n  ],\n  \"Technique Skills\": [\n    \"Air Vehicle Tech\",\n    \"Basic Tech\",\n    \"Cybertech\",\n    \"Demolitions\",\n    \"Electronics/Security Tech\",\n    \"First Aid\",\n    \"Forgery\",\n    \"Land Vehicle Tech\",\n    \"Paint/Draw/Sculpt\",\n    \"Paramedic\",\n    \"Photography/Film\",\n    \"Pick Lock\",\n    \"Pick Pocket\",\n    \"Sea Vehicle Tech\",\n    \"Weaponstech\",\n  ],\n};\n\n// Get skills from the actor\nconst skills = actor.items.filter((item) => item.type === \"skill\");\nconst roles = actor.items.filter((item) => item.type === \"role\");\n\n// Function to add transaction to ledger\nasync function addTransactionToLedger(actor, type, value, description) {\n  await actor.update({\n    [`system.${type}.transactions`]: [\n      ...(actor.system[type]?.transactions || []),\n      {\n        date: new Date().toLocaleString(),\n        user: game.user.name,\n        value: value,\n        reason: description,\n      },\n    ],\n  });\n}\n\n// Function for creating chat messages for upgrades and refunds\nfunction createChatMessage(actorName, actionDescription, level, tokenName) {\n  const message = `<strong>${actorName}</strong> ${actionDescription} to <strong>Level ${level}</strong> (${tokenName}).`;\n  ChatMessage.create({ content: message });\n}\n\n// Ensure the `renderLevelUpDialog()` and required constants are set correctly.\nasync function renderLevelUpDialog() {\n  let skillOptions = \"\";\n  Object.keys(skillCategories).forEach((category) => {\n    skillOptions += `<div class=\"category-title\">${category}</div><div class=\"skill-category\">`;\n    skillCategories[category].forEach((skillName) => {\n      const skill = skills.find((s) => s.name === skillName);\n      if (skill) {\n        const level = skill.system.level;\n        const description =\n          manualDescriptions[skill.name] || \"No description available.\";\n        const icon = uniqueIcons[skill.name] || \"fas fa-question-circle\";\n\n        let pips = \"\";\n        for (let i = 0; i < 10; i++) {\n          pips += `<span class=\"pip ${i < level ? \"filled\" : \"\"}\"></span>`;\n        }\n\n        if (level >= 10) {\n            skillOptions += `\n                <div class=\"cyber-tile skill-card selectable\" data-id=\"${skill._id}\" data-type=\"skill\" data-max-level=\"true\">\n                    <div class=\"skill-icon-container\"><i class=\"${icon} skill-icon\"></i></div>\n                    <div class=\"skill-info\">\n                        <strong>${skill.name}</strong> (Level ${level}) - <span style=\"color: #F65261;\">Max Level</span><br>\n                        <span class=\"skill-description\">${description}</span>\n                        <div class=\"pip-container\">${pips}</div>\n                    </div>\n                </div>`;\n        } else {\n          const nextLevel = level + 1;\n          const cost = difficultSkills.includes(skill.name)\n            ? costMap.difficult[nextLevel - 1]\n            : costMap.typical[nextLevel - 1];\n          skillOptions += `\n                        <div class=\"cyber-tile skill-card selectable\" data-id=\"${skill._id}\" data-type=\"skill\" data-cost=\"${cost}\">\n                            <div class=\"skill-icon-container\"><i class=\"${icon} skill-icon\"></i></div>\n                            <div class=\"skill-info\">\n                                <strong>${skill.name}</strong> (Level ${level}) - <span style=\"color: #F65261;\">Cost: ${cost} I.P.</span><br>\n                                <span class=\"skill-description\">${description}</span>\n                                <div class=\"pip-container\">${pips}</div>\n                            </div>\n                        </div>`;\n        }\n      }\n    });\n    skillOptions += `</div>`;\n  });\n\n  let abilityOptions = \"\";\n  roles.forEach((role) => {\n    const roleName = role.name.toLowerCase();\n    const roleAbilityName = roleAbilitiesMapping[roleName];\n\n    if (roleAbilityName) {\n      let abilityLevel = role.system?.rank || role.system?.value || 0;\n      const description =\n        manualDescriptions[roleAbilityName] || \"No description available.\";\n      const icon = uniqueIcons[roleAbilityName] || \"fas fa-question-circle\";\n\n      let pips = \"\";\n      for (let i = 0; i < 10; i++) {\n        pips += `<span class=\"pip ${i < abilityLevel ? \"filled\" : \"\"}\"></span>`;\n      }\n\n      if (abilityLevel >= 10) {\n        abilityOptions += `\n                    <div class=\"cyber-tile skill-card selectable\" data-id=\"${role._id}\" data-type=\"ability\" data-max-level=\"true\">\n                        <div class=\"skill-icon-container\"><i class=\"${icon} skill-icon\"></i></div>\n                        <div class=\"skill-info\">\n                            <strong>${roleAbilityName}</strong> (Rank ${abilityLevel}) - <span style=\"color: #F65261;\">Max Level</span><br>\n                            <span class=\"skill-description\">${description}</span>\n                            <div class=\"pip-container\">${pips}</div>\n                        </div>\n                    </div>`;\n      } else {\n        const nextLevel = abilityLevel + 1;\n        const cost = costMap.roleAbility[nextLevel - 1] || 0;\n        abilityOptions += `\n                    <div class=\"cyber-tile skill-card selectable\" data-id=\"${role._id}\" data-type=\"ability\" data-cost=\"${cost}\">\n                        <div class=\"skill-icon-container\"><i class=\"${icon} skill-icon\"></i></div>\n                        <div class=\"skill-info\">\n                            <strong>${roleAbilityName}</strong> (Rank ${abilityLevel}) - <span style=\"color: #F65261;\">Cost: ${cost} I.P.</span><br>\n                            <span class=\"skill-description\">${description}</span>\n                            <div class=\"pip-container\">${pips}</div>\n                        </div>\n                    </div>`;\n      }\n    }\n  });\n\n  const optionsContent = `\n        <div class=\"skills-section\">\n            ${skillOptions}\n        </div>\n        <div class=\"role-abilities-section\">\n            <div class=\"category-title\">Role Abilities</div><div class=\"skill-category\">\n            ${abilityOptions}\n        </div>`;\n\n  // Render the dialog\n  new Dialog({\n    title: \"Spend Improvement Points\",\n    content: `\n<div class=\"level-up-container\">\n    <pre class=\"ascii-art\">\n    ██╗     ███████╗██╗   ██╗███████╗██╗         ██╗   ██╗██████╗ \n    ██║     ██╔════╝██║   ██║██╔════╝██║         ██║   ██║██╔══██╗\n    ██║     █████╗  ██║   ██║█████╗  ██║         ██║   ██║██████╔╝\n    ██║     ██╔══╝  ██║   ██║██╔══╝  ██║         ██║   ██║██╔═══╝ \n    ███████╗███████╗╚██████╔╝███████╗╚██████╗    ╚██████╔╝██║     \n    ╚══════╝╚══════╝ ╚═════╝ ╚══════╝ ╚═════╝     ╚═════╝ ╚═╝     \n    </pre>\n    <p class=\"fun-message\">\"Upgrade your systems. Burn the points, build your legend.\"</p>\n    <p class=\"points-display\">Available Improvement Points: <strong>${improvementPoints}</strong></p>\n    <div class=\"options-container\">${optionsContent}</div>\n</div>\n\n    `,\nbuttons: {\n    confirm: {\n        label: \"Confirm Level Up\",\n        callback: async (html) => {\n          const selectedCards = html.find('.skill-card.selected').filter('[data-max-level!=\"true\"]');\n          if (!selectedCards.length) {\n              // Notify the user and keep the dialog open\n              ui.notifications.warn(\"Please select at least one skill or ability to level up that is not maxed out!\");\n              renderLevelUpDialog();  // Re-render the dialog to keep it open\n              return;\n          }\n\n            let totalCost = 0;\n            let selectedItems = [];\n\n            // Collect selected items and total cost\n            selectedCards.each((_, card) => {\n                const itemId = $(card).data('id');\n                const itemType = $(card).data('type');\n                const cost = parseInt($(card).data('cost'), 10);\n                \n                selectedItems.push({ id: itemId, type: itemType, cost: cost });\n                totalCost += cost;\n            });\n\n            if (totalCost > improvementPoints) {\n                ui.notifications.error(\"Insufficient Improvement Points for the selected upgrades.\");\n                renderLevelUpDialog(); // Re-render the dialog to keep it open\n                return;\n            }\n\n            // Confirmation Dialog for Spending IP\n            totalCost = 0;  // Reset the totalCost to 0 before recalculating\n\n            let confirmMessage = '<p>Are you sure you want to upgrade the following skills or abilities?</p><ul>';\n            selectedItems.forEach(item => {\n              const selectedItem = actor.items.get(item.id);\n              confirmMessage += `<li>${selectedItem.name} - Cost: ${item.cost} IP</li>`;\n              totalCost += item.cost; // Accumulate the cost\n            });\n            confirmMessage += `</ul><p><strong>Total Cost: ${totalCost} IP</strong></p>`;\n\n            new Dialog({\n              title: \"Confirm Changes\",\n              content: confirmMessage,\n              buttons: {\n                yes: {\n                  label: \"Yes\",\n                  callback: async () => {\n                    // Prepare batch updates\n                    let updates = [];\n                    selectedItems.forEach(item => {\n                      const selectedItem = actor.items.get(item.id);\n                      let newLevel;\n\n                      if (item.type === \"skill\" && selectedItem.system.level !== undefined) {\n                        newLevel = selectedItem.system.level + 1;\n                        updates.push({\n                          _id: selectedItem._id,\n                          \"system.level\": newLevel\n                        });\n                      } else if (item.type === \"ability\" && selectedItem.system.rank !== undefined) {\n                        newLevel = selectedItem.system.rank + 1;\n                        updates.push({\n                          _id: selectedItem._id,\n                          \"system.rank\": newLevel\n                        });\n\n                        // Handle special sub-abilities if applicable\n                        if ([\"Combat Awareness\", \"Medicine\", \"Maker\"].includes(selectedItem.system.mainRoleAbility)) {\n                          allocateSubAbilities(selectedItem, newLevel);\n                        }\n                      }\n                    });\n\n                    // Execute the batch updates\n                    await actor.updateEmbeddedDocuments(\"Item\", updates);\n                    \n                     // Generate a descriptive list of upgraded skills or abilities\n                     let upgradedItemsList = selectedItems.map(item => {\n                         const selectedItem = actor.items.get(item.id);\n                         return selectedItem ? selectedItem.name : \"Unknown Item\";\n                     }).join(\", \");\n\n                     // Update ledger with the names of upgraded items\n                     await actor.deltaLedgerProperty(\"improvementPoints\", -totalCost, `Upgraded: ${upgradedItemsList}`);\n\n\n                     // Update the local `improvementPoints` to reflect the ledger change\n                     improvementPoints -= totalCost;\n\n                     // Update the UI with the new value\n                     const updatedDialogHtml = document.querySelector(\".points-display strong\");\n                     if (updatedDialogHtml) {\n                         updatedDialogHtml.textContent = improvementPoints;\n                     }\n\n                     // Iterate through selected items to perform upgrades and create individual chat messages\n                     for (const item of selectedItems) {\n                         const selectedItem = actor.items.get(item.id);\n                         if (!selectedItem) {\n                             console.error(\"Selected item not found:\", item.id);\n                             continue;\n                         }\n\n                         const newLevel = item.type === \"skill\" ? selectedItem.system.level : selectedItem.system.rank;\n\n                         // Create a chat message\n                         createChatMessage(token.name, `upgraded <strong>${selectedItem.name}</strong>`, newLevel, token.name);\n\n                         // Update Haggle if Operator is updated for Fixer role\n                         if (selectedItem.system.mainRoleAbility && selectedItem.system.mainRoleAbility === \"Operator\") {\n                             await updateHaggleToMatchOperator(actor, selectedItem, newLevel);\n                         }\n                     }\n\n                    // Play level-up notification\n                    ui.notifications.info(`You have successfully upgraded ${selectedItems.length} items.`);\n                    let audio = new Audio(\"REPLACEWITHYOURSOUND.mp3\");\n                    audio.volume = 0.3;\n                    audio.play();\n\n                    // Refresh the level-up dialog to reflect changes\n                    renderLevelUpDialog();\n                  }\n                },\n                no: { label: \"No\" }\n              }\n            }).render(true);\n        }\n    },\n    refund: {\n        label: \"Refund IP\",\n        callback: async (html) => {\n          const selectedCards = html.find('.skill-card.selected');\n          if (!selectedCards.length) {\n              // Notify the user and keep the dialog open\n              ui.notifications.warn(\"Please select at least one skill or ability to refund!\");\n              renderLevelUpDialog();  // Re-render the dialog to keep it open\n              return;\n          }\n\n          let totalRefund = 0;\n          let selectedItems = [];\n\n          // Loop through selected cards and add to selectedItems with cost\n          selectedCards.each((_, card) => {\n              const itemId = $(card).data('id');\n              const itemType = $(card).data('type');\n              const selectedItem = actor.items.get(itemId);\n\n              let currentLevel = itemType === \"skill\" ? selectedItem.system.level : selectedItem.system.rank;\n              let refundCost;\n\n              if (currentLevel > 0) {\n                  // Determine refund cost based on item type and level\n                  if (itemType === \"ability\" && selectedItem.system.mainRoleAbility) {\n                      refundCost = costMap.roleAbility[currentLevel - 1];\n                  } else if (itemType === \"skill\" && difficultSkills.includes(selectedItem.name)) {\n                      refundCost = costMap.difficult[currentLevel - 1];\n                  } else if (itemType === \"skill\") {\n                      refundCost = costMap.typical[currentLevel - 1];\n                  }\n\n                  // Add the selected item with cost information to the list\n                  selectedItems.push({ id: itemId, type: itemType, cost: refundCost });\n                  totalRefund += refundCost;\n              }\n          });\n\n            // Reset totalRefund to 0 before recalculating\n            totalRefund = 0;\n\n            // Build the confirmation dialog message\n            let confirmMessage = '<p>Are you sure you want to refund the following skills or abilities?</p><ul>';\n            selectedItems.forEach(item => {\n                const selectedItem = actor.items.get(item.id);\n                confirmMessage += `<li>${selectedItem.name} - Refund: ${item.cost} IP</li>`;\n                totalRefund += item.cost; // Accumulate the refund amount\n            });\n            confirmMessage += `</ul><p><strong>Total Refund: ${totalRefund} IP</strong></p>`;\n\n            new Dialog({\n                title: \"Confirm Refund\",\n                content: confirmMessage,\n                buttons: {\n                    yes: {\n                        label: \"Yes\",\n                        callback: async () => {\n                            // Execute Refunds\n                            let updates = [];\n                            for (const item of selectedItems) {\n                                const selectedItem = actor.items.get(item.id);\n                                let newLevel;\n\n                                if (item.type === \"skill\" && selectedItem.system.level !== undefined && selectedItem.system.level > 0) {\n                                    newLevel = selectedItem.system.level - 1;\n                                    updates.push({\n                                        _id: selectedItem._id,\n                                        \"system.level\": newLevel\n                                    });\n                                } else if (item.type === \"ability\" && selectedItem.system.rank !== undefined && selectedItem.system.rank > 0) {\n                                    newLevel = selectedItem.system.rank - 1;\n                                    updates.push({\n                                        _id: selectedItem._id,\n                                        \"system.rank\": newLevel\n                                    });\n\n                                    if ([\"Combat Awareness\", \"Medicine\", \"Maker\"].includes(selectedItem.system.mainRoleAbility)) {\n                                        allocateSubAbilities(selectedItem, newLevel);\n                                    }\n                                }\n                            }\n\n                             // Update items for refund\n                             await actor.updateEmbeddedDocuments(\"Item\", updates);\n\n                             // Generate a descriptive list of refunded skills or abilities\n                             let refundedItemsList = selectedItems.map(item => {\n                                 const selectedItem = actor.items.get(item.id);\n                                 return selectedItem ? selectedItem.name : \"Unknown Item\";\n                             }).join(\", \");\n\n                             // Update ledger with the names of refunded items\n                             await actor.deltaLedgerProperty(\"improvementPoints\", totalRefund, `Refunded: ${refundedItemsList}`);\n\n                             // Update the local `improvementPoints` to reflect the ledger change\n                             improvementPoints += totalRefund;\n\n                             // Update the UI with the new value\n                             const updatedDialogHtml = document.querySelector(\".points-display strong\");\n                             if (updatedDialogHtml) {\n                                 updatedDialogHtml.textContent = improvementPoints;\n                             }\n\n                             // Iterate through selected items to create individual chat messages\n                             for (const item of selectedItems) {\n                                 const selectedItem = actor.items.get(item.id);\n                                 if (!selectedItem) {\n                                     console.error(\"Selected item not found:\", item.id);\n                                     continue;\n                                 }\n\n                                 const newLevel = item.type === \"skill\" ? selectedItem.system.level : selectedItem.system.rank;\n\n                                 // Create chat message for each refund\n                                 createChatMessage(token.name, `refunded <strong>${selectedItem.name}</strong>`, newLevel, token.name);\n\n                                 // Update Haggle if Operator is updated for Fixer role\n                                 if (selectedItem.system.mainRoleAbility && selectedItem.system.mainRoleAbility === \"Operator\") {\n                                     await updateHaggleToMatchOperator(actor, selectedItem, newLevel);\n                                 }\n                             }\n\n                             // Play refund notification\n                             ui.notifications.info(`You have successfully refunded ${selectedItems.length} items.`);\n                             let audio = new Audio(\"REPLACEWITHYOURURLHERE.MP3\");\n                             audio.volume = 0.3;\n                             audio.play();\n\n                             // Refresh UI to reflect changes\n                             renderLevelUpDialog();\n                        }\n                    },\n                    no: { label: \"No\" },\n                },\n                default: \"no\",\n            }).render(true);\n        }\n    },\n      cancel: { label: \"Close Dialog\" },\n    },\n        // Allow multiple skill card selections\n        render: (html) => {\n            html.find(\".skill-card\").on(\"click\", function () {\n                $(this).toggleClass(\"selected\");  // Allows for multiple selections\n            });\n        },\n    zIndex: 20, // Ensures the dialog appears on top of other UI elements\n  }).render(true);\n}\n\n\n///////////////////////////////////////////////////\n// Call the function to render the Level-Up Dialog\nrenderLevelUpDialog();\n\n// Function to allocate sub-abilities with dialog z-index management\nfunction allocateSubAbilities(selectedItem, newRank) {\n  const subAbilities = selectedItem.system?.abilities;\n\n  if (\n    !subAbilities ||\n    !Array.isArray(subAbilities) ||\n    subAbilities.length === 0\n  ) {\n    console.log(`No valid sub-abilities found for ${selectedItem.name}`);\n    return;\n  }\n\n  // Generate Content for each sub-ability card\n  let allocationContent = subAbilities\n    .map((subAbility, index) => {\n      const description =\n        manualDescriptions[subAbility.name] || \"No description available.\";\n      const icon = uniqueIcons[subAbility.name] || \"fas fa-question-circle\";\n      const currentRank = subAbility.rank || 0;\n\n      // Generate pips for current rank\n      let pips = \"\";\n      for (let i = 0; i < 10; i++) {\n        pips += `<span class=\"pip ${i < currentRank ? \"filled\" : \"\"}\"></span>`;\n      }\n\n      return `\n            <div class=\"sub-ability-card\" data-index=\"${index}\">\n                <div class=\"sub-ability-icon-container\"><i class=\"${icon} sub-ability-icon\"></i></div>\n                <div class=\"sub-ability-info\">\n                    <strong>${subAbility.name}</strong><br>\n                    <span class=\"sub-ability-description\">${description}</span>\n                    <div class=\"pip-container\">${pips}</div>\n                    <div class=\"increment-controls\">\n                        <label>Allocate Points:</label>\n                        <input type=\"number\" name=\"subAbility\" data-index=\"${index}\" value=\"${currentRank}\" min=\"0\" max=\"${newRank}\" style=\"width: 60px; text-align: center;\" />\n                    </div>\n                </div>\n            </div>\n        `;\n    })\n    .join(\"\");\n\n  // Close the previous dialog before rendering a new one\n  const previousDialogs = document.querySelectorAll(\".dialog\");\n  previousDialogs.forEach((dialog) => {\n    dialog.style.zIndex = 9990; // Push existing dialog slightly back to allow new dialog to come forward\n  });\n\n  const dialog = new Dialog(\n    {\n      title: `Allocate Points for ${selectedItem.system.mainRoleAbility}`,\n      content: `\n            <div class=\"sub-abilities-dialog\">\n                <div class=\"cyberpunk-header\">\n                    <pre class=\"cyberpunk-art\">─── SYSTEM INITIATED ───</pre>\n                    <p class=\"cyberpunk-message\">\"DISTRIBUTE <strong>${newRank}</strong> UPGRADE UNITS\"</p>\n                </div>\n                <div class=\"sub-abilities-container\">${allocationContent}</div>\n            </div>\n        `,\n      buttons: {\n        confirm: {\n          label: \"Confirm Allocation\",\n          callback: async (html) => {\n            let allocatedPoints = 0;\n            const allocations = [];\n\n            html.find('input[name=\"subAbility\"]').each((_, input) => {\n              const index = $(input).data(\"index\");\n              const points = parseInt($(input).val(), 10);\n\n              if (isNaN(points) || points < 0) {\n                console.warn(\n                  `Invalid points value for sub-ability at index ${index}: ${points}`,\n                );\n                return;\n              }\n\n              allocatedPoints += points;\n\n              allocations.push({ index, points });\n            });\n\n            if (allocatedPoints > newRank) {\n              ui.notifications.error(\n                `You can only allocate a maximum of ${newRank} points.`,\n              );\n              return allocateSubAbilities(selectedItem, newRank); // Keep dialog open for corrections\n            }\n\n            if (allocatedPoints < newRank) {\n              const unusedPoints = newRank - allocatedPoints;\n              ui.notifications.error(\n                `You have ${unusedPoints} unused points. You must allocate all points.`,\n              );\n              return allocateSubAbilities(selectedItem, newRank); // Keep dialog open for corrections\n            }\n\n            // Update each sub-ability rank based on the allocated points\n            const updatedAbilities = JSON.parse(JSON.stringify(subAbilities));\n            allocations.forEach(({ index, points }) => {\n              if (updatedAbilities[index]) {\n                updatedAbilities[index].rank = points;\n              }\n            });\n\n            await actor.updateEmbeddedDocuments(\"Item\", [\n              {\n                _id: selectedItem._id,\n                \"system.abilities\": updatedAbilities,\n              },\n            ]);\n\n            ui.notifications.info(\n              `Successfully allocated points for ${selectedItem.name}.`,\n            );\n          },\n        },\n      },\n      default: \"cancel\",\n    },\n    {\n      closable: false, // Disables the close button specifically for this dialog\n    },\n  );\n\n  // Render the dialog and ensure it's on top\n  dialog.render(true);\n\n  // Insert the z-index adjustment code here\n  setTimeout(() => {\n    const dialogElement = document.querySelector(\".dialog:last-of-type\"); // Target the latest dialog\n    if (dialogElement) {\n      dialogElement.style.zIndex = 9999; // Ensure this dialog is on top\n      dialogElement.style.left = `${parseFloat(dialogElement.style.left) - 50}px`; // Move the dialog slightly to the left (e.g., 50px)\n    }\n\n    // Adjust the notification container to be above the dialog\n    const notificationContainer = document.querySelector(\"#notifications\");\n    if (notificationContainer) {\n      notificationContainer.style.zIndex = 10000; // Set a higher z-index so notifications stay on top\n    }\n  }, 10);\n}\n\n// Function to update Haggle ability to match Operator rank for Fixer role\nasync function updateHaggleToMatchOperator(actor, selectedItem, newRank) {\n  const haggleAbility = selectedItem.system.abilities.find(\n    (ability) => ability.name.toLowerCase() === \"haggle\",\n  );\n  if (haggleAbility) {\n    // Update the rank of Haggle to match Operator rank\n    haggleAbility.rank = newRank;\n\n    await actor.updateEmbeddedDocuments(\"Item\", [\n      {\n        _id: selectedItem._id,\n        \"system.abilities\": selectedItem.system.abilities,\n      },\n    ]);\n\n    ui.notifications.info(\n      `Haggle has been updated to match Operator rank (${newRank}).`,\n    );\n  } else {\n    console.warn(\"Haggle ability not found within Fixer role.\");\n  }\n}\n\n// CSS for dialog styling and pip bars\nconst style = document.createElement(\"style\");\nstyle.textContent = `\n    .level-up-container {\n    background-color: #1b1b1b;\n    padding: 5px;\n    color: #ffffff;\n    border: 2px solid #ffd700;\n    border-radius: 0px;\n    max-height: 550px;\n    overflow-y: auto;\n    width: 100%;\n    }\n    .ascii-art {\n    font-family: monospace;\n    font-size: 0.55em;\n    color: #FFD700;\n    text-align: center;\n    margin-bottom: 5px;\n    line-height: 1.1;\n    }\n    .fun-message {\n    font-size: .9em;\n    color: #FFD700;\n    text-align: center;\n    margin-bottom: 5px;\n    font-style: italic;\n    }\n    .points-display {\n    font-size: 0.9em;\n    text-align: center;\n    margin-bottom: 10px;\n    color: #FFD700;\n    }\n    .options-container {\n        display: flex;\n        flex-direction: column;\n        gap: 5px;\n    }\n    .category-title {\n        font-size: 1.4em;\n        font-weight: 600;\n        color: #000000;\n        background-color: #ffd700;\n        padding: 5px;\n        margin: 5px 0 5px;\n        text-align: center;\n        border-radius: 5px;\n    }\n    .skill-category {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 5px;\n        justify-content: center;\n        padding: .5em;\n    }\n    .unselectable {\n        opacity: 0.5;\n    }\n    .cyber-tile.skill-card {\n        background: #2e2e2e;\n        padding: .8em;\n        border-radius: 5px;\n        border: 1px solid #FFD700;\n        transition: transform 0.2s, box-shadow 0.2s;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        cursor: pointer;\n        width: 160px;\n    }\n    .cyber-tile.skill-card:hover {\n        transform: scale(1.05);\n        box-shadow: 0 0 8px #FFD700;\n    }\n    .cyber-tile.skill-card.selected {\n        position: relative;\n        overflow: hidden;\n        box-shadow: 0 0 12px #00FF00;\n        border: 2px solid #00FF00;\n    }\n\n    /* Highlight the border for max-level cards */\n    .cyber-tile.skill-card[data-max-level=\"true\"] {\n        border: 2px solid #F65261; \n    }\n\n    /* Change the color of pips for max-level cards */\n    .cyber-tile.skill-card[data-max-level=\"true\"] .pip {\n        background-color: #F65261; \n    }\n\n    .cyber-tile.skill-card.selected::before {\n        content: \"\";\n        position: absolute;\n        top: -100%;\n        left: 0;\n        width: 100%;\n        height: 200%;\n        background: rgba(0, 255, 0, 0.15);\n        background: linear-gradient(180deg, transparent, rgba(0, 255, 0, 0.2), transparent);\n        animation: scanAnimation 3s infinite;\n    }\n\n    @keyframes scanAnimation {\n        0% {\n            top: -100%;\n        }\n        100% {\n            top: 100%;\n        }\n    }\n\n    .skill-icon-container {\n        margin-bottom: 1px;\n    }\n    .skill-icon {\n        font-size: 1.8em;\n        color: #F65261;\n    }\n    .skill-info {\n        text-align: center;\n        font-size: 0.8em;\n    }\n    .skill-description {\n        font-size: 0.7em;\n        color: #BBBBBB;\n        margin-top: 0;\n    }\n    .sub-ability-card {\n    background: #2e2e2e;\n    padding: 10px;\n    border-radius: 5px;\n    border: 1px solid #ffd700;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    transition: transform 0.2s, box-shadow 0.2s;\n    cursor: pointer;\n    }\n    .sub-ability-card.unselectable {\n        opacity: 0.5;\n    }\n    .sub-ability-icon-container {\n        margin-right: 10px;\n    }\n    .sub-ability-icon {\n        font-size: 1.5em;\n        color: #FFD700;\n    }\n    .sub-ability-info {\n        flex-grow: 1;\n    }\n\n    .pip-container {\n        margin-top: 2px;\n    }\n    .pip {\n        display: inline-block;\n        width: 8px;\n        height: 8px;\n        margin-right: 2px;\n        background-color: #444;\n        border-radius: 50%;\n    }\n    .pip.filled {\n        background-color: #FFD700;\n    }\n/* Style for sub-ability cards */\n\n.cyberpunk-header {\n    text-align: center;\n    padding: 10px;\n    border-bottom: 2px solid #FFD700;\n    margin-bottom: 15px;\n    color: #FFD700;\n}\n\n.cyberpunk-art {\n    font-family: monospace;\n    font-size: 0.8em;\n    color: #FFD700;\n    line-height: 1.2;\n    margin: 0;\n}\n\n.cyberpunk-message {\n    font-size: 1.1em;\n    color: #FFD700;\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    font-weight: bold;\n    font-style: italic;\n}\n\n.sub-abilities-dialog {\n    max-height: 400px;\n    overflow-y: auto;\n    padding: 10px;\n    background-color: #2B2B2B;\n    color: #FFFFFF;\n    border: 2px solid #FFD700;\n    border-radius: 0;\n    width: 100%;\n}\n\n.sub-abilities-container {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n    width: 100%;\n}\n\n.sub-ability-card {\n    background: #2e2e2e;\n    padding: 10px;\n    border-radius: 5px;\n    border: 1px solid #FFD700;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    transition: transform 0.2s, box-shadow 0.2s;\n    cursor: pointer;\n}\n\n.sub-ability-card:hover {\n    transform: scale(1.05);\n    box-shadow: 0 0 8px #FFD700;\n}\n\n.sub-ability-card.unselectable {\n    opacity: 0.5;\n}\n\n.sub-ability-icon-container {\n    margin-bottom: 8px;\n}\n\n.sub-ability-icon {\n    font-size: 1.5em;\n    color: #F65261;\n}\n\n.sub-ability-info {\n    text-align: center;\n}\n\n.increment-controls {\n    display: flex;\n    align-items: center;\n    margin-top: 5px;\n}\n\n.increment-controls button {\n    background-color: #333;\n    color: #FFD700;\n    border: none;\n    padding: 2px 6px;\n    cursor: pointer;\n}\n\n.increment-controls button:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n}\n\n.increment-controls input {\n    width: .5em !important;\n    text-align: center;\n    color: #FFD700;\n    background-color: #222;\n    border: 1px solid #444 !important;\n    margin: 0 10px !important;\n}\n\n`;\ndocument.head.appendChild(style);",
  "folder": null,
  "flags": {
    "condition-lab-triggler": {
      "macroTrigger": ""
    },
    "advanced-macros": {
      "runForSpecificUser": ""
    },
    "exportSource": {
      "world": "cyberpunkfantasy",
      "system": "cyberpunk-red-core",
      "coreVersion": "11.315",
      "systemVersion": "v0.88.2"
    },
    "core": {}
  },
  "_stats": {
    "systemId": "cyberpunk-red-core",
    "systemVersion": "v0.88.2",
    "coreVersion": "11.315",
    "createdTime": 1730060541361,
    "modifiedTime": 1731010508078,
    "lastModifiedBy": "LWBSOic5NKC2pZDV"
  }
}