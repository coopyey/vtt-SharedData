// Subtract price and update wealth
async function updateWealth(actor, amount, itemName) {
    const wealth = foundry.utils.deepClone(actor.system.wealth || { value: 0, transactions: [] });
    wealth.value += amount;

    // Generate transaction description
    const transaction = `${amount < 0 ? "Decreased" : "Increased"} by ${Math.abs(amount)} to ${wealth.value}`;
    wealth.transactions.push([transaction, `New Gear: ${itemName.substring(0, 40)}`]);
    await actor.update({ "system.wealth": wealth });
}

// Function to search and add gear items to the characters
async function searchAndAddGearToCharacters() {
    // Determine the active actors (from selected tokens or open character sheets)
    function getActiveActors() {
        const appWindows = Object.values(ui.windows);
        const sheetActors = appWindows
            .filter(window => window instanceof ActorSheet)
            .map(window => window.actor);

        const tokenActors = canvas.tokens.controlled.map(token => token.actor).filter(Boolean);

        // Combine both sources and ensure there are no duplicates
        return [...new Set([...sheetActors, ...tokenActors])];
    }

    const actors = getActiveActors();

    if (!actors.length) {
        ui.notifications.warn("No character sheet is open, and no token is selected. Please open a character sheet or select a token.");
        return;
    }

    // Fetch all items from gear-related compendiums
    const allItems = [];
    const compendiums = game.packs.filter(pack => pack.documentName === "Item");
    for (const compendium of compendiums) {
        const items = await compendium.getDocuments();
        allItems.push(...items.map(item => ({ item, compendium })));
    }

    async function openDialog() {
        // Render dialog content
        const renderDialog = () => {
            const options = allItems.map(({ item, compendium }, index) => `
                <tr class="item-row" data-name="${item.name.toLowerCase()}" data-compendium="${compendium.metadata.label.toLowerCase()}" data-index="${index}">
                    <td style="width: 10%; text-align: center;">
                        <button 
                            class="open-details" 
                            data-index="${index}" 
                            style="padding: 2px 5px; cursor: pointer; margin-right: 6px; width: auto; display: inline-block;">
                            Open
                        </button>
                    </td>
                    <td style="width: 40%; text-align: left;">
                        <img src="${item.img}" alt="${item.name}" style="width: 24px; height: 24px; margin-right: 6px;" />
                        ${item.name}
                    </td>
                    <td style="width: 20%; text-align: left;">${compendium.metadata.label}</td>
                    <td style="width: 15%; text-align: center;">${item.system?.price?.market || "N/A"}</td>
                    <td style="width: 10%; text-align: center;">${item.system?.amount || "1"}</td>
                    <td style="width: 15%; text-align: center; padding-right: 10px;">
                        <input type="number" class="quantity-input" data-index="${index}" value="" min="1" style="width: 60px;" />
                    </td>
                </tr>
            `).join("");
        
            const actorNames = actors.map(actor => actor.name).join(", ");
        
            return `
                <style>
                .item-row {
                    color: black; /* Set font color to black */
                }
                    .item-row:nth-child(even):not(.selected-row) {
                        background-color: #f9f9f9;
                    }
                    .item-row:nth-child(odd):not(.selected-row) {
                        background-color: #e9e9e9;
                    }
                    .item-row:hover {
                        background-color: #d0d0d0;
                        cursor: pointer;
                    }
                    .selected-row {
                        background-color: #007bff !important;
                        color: white;
                    }
                    .item-row:hover:not(.selected-row) {
                        background-color: #d0d0d0 !important;
                        cursor: pointer;
                    }
                    .item-row.selected-row:hover {
                        background-color: #0056b3 !important;
                        cursor: pointer;
                    }
                </style>
                <p>Selected characters: <strong>${actorNames}</strong></p>
                <div style="display: flex; gap: 10px; margin-bottom: 10px;">
                    <input type="text" id="search-field" placeholder="Search gear..." style="flex: 1;" />
                    <input type="text" id="compendium-search-field" placeholder="Search compendium..." style="width: 30%;" />
                </div>
                <div style="max-height: calc(20 * 24px); overflow-y: auto; margin-bottom: 10px; border: 1px solid #ddd; border-radius: 5px;">
                    <table style="width: 100%; border-collapse: collapse;">
                        <thead>
                            <tr>
                                <th style="text-align: center; width: 10%;">Details</th>
                                <th style="text-align: left; width: 40%;">Name</th>
                                <th style="text-align: left; width: 15%;">Compendium</th>
                                <th style="text-align: center; width: 10%;">Price</th>
                                <th style="text-align: center; width: 5%;">Amount</th>
                                <th style="text-align: center; width: 10%;">Quantity</th>
                            </tr>
                        </thead>
                        <tbody id="entry-list">
                            ${options}
                        </tbody>
                    </table>
                </div>
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <label>
                        <input type="checkbox" id="subtract-price" style="margin-right: 5px;" />
                        Subtract item price from character funds
                    </label>
                    <span id="total-cost-display" style="font-weight: bold;">Total Cost: 0 credits</span>
                </div>
                <button id="confirm-selection" style="margin-top: 10px; width: 100%;">Add Selected</button>
            `;
        };
        

        // Create dialog
        return new Promise(resolve => {
            const dialog = new Dialog({
                title: "Search and Add Gear",
                content: renderDialog(),
                buttons: {},
                render: (html) => {
                    // Adjust width for better display
                    html.closest(".dialog").css({
                        width: "800px",
                        "max-width": "95%",
                    });

                    // Explicitly set row colors
                    html.find(".item-row").each(function (index) {
                        $(this).css("background-color", index % 2 === 0 ? "#f9f9f9" : "#e9e9e9");
                    });

                    // Search functionality for gear and compendium
                    html.find("#search-field, #compendium-search-field").on("input", function () {
                        const gearQuery = html.find("#search-field").val().toLowerCase();
                        const compendiumQuery = html.find("#compendium-search-field").val().toLowerCase();
                    
                        html.find(".item-row").each(function () {
                            const rowName = $(this).data("name");
                            const compendiumName = $(this).data("compendium");
                            const matchesGear = rowName.includes(gearQuery);
                            const matchesCompendium = compendiumName.includes(compendiumQuery);
                    
                            // Toggle visibility of rows based on search results
                            $(this).toggle(matchesGear && matchesCompendium);
                        });
                    
                        // Reapply alternating row colors based on visibility
                        html.find(".item-row:visible").each(function (index) {
                            if (!$(this).hasClass("selected-row")) {
                                $(this).css("background-color", index % 2 === 0 ? "#f9f9f9" : "#e9e9e9");
                            }
                        });
                    });
                    

                    // Event: Open item details on "Open" button click
                    html.find(".open-details").on("click", function (event) {
                        event.stopPropagation(); // Prevent row selection when clicking the button
                        const index = $(this).data("index");
                        const item = allItems[index].item;
                        item.sheet.render(true); // Open the item's details
                    });

                    // Event: Select row on click
                    html.find(".item-row").on("click", function () {
                        const index = $(this).data("index");
                        const isSelected = $(this).hasClass("selected-row");

                        // Toggle row selection
                        $(this).toggleClass("selected-row", !isSelected);

                        // Reassign background colors for visible rows
                        html.find(".item-row:visible").each(function (i) {
                            if (!$(this).hasClass("selected-row")) {
                                $(this).css("background-color", i % 2 === 0 ? "#f9f9f9" : "#e9e9e9");
                            }
                        });

                        // Set Quantity to 1 if the row is selected and quantity is empty
                        if (!isSelected) {
                            const quantityInput = $(this).find(".quantity-input");
                            if (quantityInput.val() === "" || parseInt(quantityInput.val()) < 1) {
                                quantityInput.val(1);
                            }
                        }
                    });

                    // Update total cost dynamically
                    html.find(".quantity-input, .item-row").on("input change click", function () {
                        let totalCost = 0;

                        html.find(".item-row.selected-row").each(function () {
                            const index = $(this).data("index");
                            const item = allItems[index].item;
                            const quantity = parseInt(html.find(`input.quantity-input[data-index="${index}"]`).val()) || 1;
                            const amount = item.system?.amount || 1; // Default to 1 if Amount is not defined
                            const totalUnits = quantity * amount; // Total units based on Quantity and Amount
                            const costPerUnit = (item.system?.price?.market || 0) / amount; // Cost per unit
                            const totalPrice = costPerUnit * totalUnits; // Total price for the selected quantity

                            totalCost += totalPrice;
                        });

                        html.find("#total-cost-display").text(`Total Cost: ${totalCost > 0 ? `-${totalCost.toFixed(2)} credits` : "N/A"}`);
                    });

                    // Handle confirmation
                    html.find("#confirm-selection").click(async () => {
                        const subtractPrice = html.find("#subtract-price").is(":checked");
                        const selectedIndexes = html.find(".item-row.selected-row")
                            .map((_, row) => parseInt($(row).data("index")))
                            .get();
                        const selectedQuantities = {};
                        html.find("input.quantity-input").each((_, input) => {
                            const index = parseInt($(input).data("index"));
                            const quantity = parseInt($(input).val());
                            selectedQuantities[index] = quantity || 1;
                        });

                        const chatLogs = [];
                        let grandTotalCost = 0;

                        for (const actor of actors) {
                            let totalCost = 0;
                            const itemsAdded = [];

                            for (const index of selectedIndexes) {
                                const { item } = allItems[index];
                                const quantity = selectedQuantities[index] || 1;
                                const amount = item.system?.amount || 1; // Default to 1 if Amount is not defined
                                const totalUnits = quantity * amount; // Total units to be added
                                const costPerUnit = (item.system?.price?.market || 0) / amount; // Cost per unit
                                const totalPrice = costPerUnit * totalUnits; // Total price for all units

                                itemsAdded.push(`${item.name} x${totalUnits}`);

                                // Add to inventory
                                await actor.createEmbeddedDocuments("Item", [
                                    {
                                        ...item.toObject(),
                                        system: { ...item.system, amount: totalUnits }
                                    }
                                ]);

                                // Subtract price if applicable
                                if (subtractPrice && totalPrice > 0) {
                                    totalCost += totalPrice;
                                    grandTotalCost += totalPrice;
                                    await updateWealth(actor, -totalPrice, `${item.name} (Total: ${totalUnits})`);
                                }
                            }

                            chatLogs.push(`
                                <strong>${actor.name}</strong>:<br>
                                Items:<br>
                                ${itemsAdded.map(item => `<div>${item}</div>`).join("")}
                                <div style="${totalCost === 0 ? "color: red; font-weight: bold;" : ""}">
                                    Total Cost: ${totalCost > 0 ? `-${totalCost.toFixed(2)} credits` : "N/A"}
                                </div>
                            `);
                        }

                        // Post chat message
                        ChatMessage.create({
                            content: `<h3>Gear Added</h3>${chatLogs.join("<hr>")}`
                        });

                        ui.notifications.info("Selected gear has been added to your character(s).");
                        html.closest(".dialog").remove();
                        resolve();
                    });
                }
            });
            dialog.render(true);
        });
    }

    await openDialog();
}

// Execute the function
searchAndAddGearToCharacters();