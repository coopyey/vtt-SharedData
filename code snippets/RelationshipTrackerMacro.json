{
  "name": "Relationship Tracker 1.1",
  "type": "script",
  "scope": "global",
  "author": "LWBSOic5NKC2pZDV",
  "img": "icons/svg/dice-target.svg",
  "command": "class RelationshipTrackerApp extends Application {\n\n  // category ranges and metadata\n  static RELATIONSHIP_TIERS = {\n      lover: {\n          range: [-100, 100], \n          title: \"Lover\",\n          description: \"A romantic or intimate relationship that transcends normal bonds.\",\n          examples: [\"Partner\", \"Soulmate\"]\n      },\n      chombatta: {\n          range: [100, 100],\n          title: \"Choombatta\",\n          description: \"Closest possible relationship, like family or lifelong comrades. There's an unbreakable trust forged through shared hardship or mutual loyalty.\",\n          examples: [\"Blood Brothers\", \"Ride-or-Die\"]\n      },\n      ally: {\n          range: [75, 99],\n          title: \"Ally\",\n          description: \"Trusted friend or close ally with a shared purpose or goal. Reliable and supportive in times of need.\",\n          examples: [\"Chummer\", \"Confidant\"]\n      },\n      partnerInCrime: {\n          range: [50, 74],\n          title: \"Partner-in-Crime\",\n          description: \"Someone you work well with and share a mutual respect, but the connection is pragmatic rather than deeply personal.\",\n          examples: [\"Co-conspirator\", \"Crewmate\"]\n      },\n      acquaintance: {\n          range: [25, 49],\n          title: \"Acquaintance\",\n          description: \"A casual connection or someone you're generally positive toward but don't have a deep bond with.\",\n          examples: [\"Contact\", \"Associate\"]\n      },\n      neutral: {\n          range: [0, 24],\n          title: \"Neutral\",\n          description: \"No strong feelings, positive or negative. A stranger or someone you're indifferent toward.\",\n          examples: [\"Drifter\", \"Rando\"]\n      },\n      irritant: {\n          range: [-24, -1],\n          title: \"Irritant\",\n          description: \"Someone you mildly dislike or find annoying. No significant conflict, just friction or personality clashes.\",\n          examples: [\"Annoyance\", \"Nuisance\"]\n      },\n      rival: {\n          range: [-49, -25],\n          title: \"Rival\",\n          description: \"A competitor or someone you actively work against, but not necessarily out of hatred.\",\n          examples: [\"Contender\", \"Challenger\"]\n      },\n      adversary: {\n          range: [-74, -50],\n          title: \"Adversary\",\n          description: \"A clear opponent or someone whose interests strongly conflict with your own.\",\n          examples: [\"Enemy\", \"Opponent\"]\n      },\n      nemesis: {\n          range: [-99, -75],\n          title: \"Nemesis\",\n          description: \"A personal or professional foe who actively works against you. There's bad blood and deliberate antagonism.\",\n          examples: [\"Foe\", \"Saboteur\"]\n      },\n      archNemesis: {\n          range: [-100, -100],\n          title: \"Arch-Nemesis\",\n          description: \"The deepest possible hatred. This person represents everything you stand against and vice versa.\",\n          examples: [\"Sworn Enemy\", \"Archenemy\"]\n      }\n  };\n\n  static get defaultOptions() {\n      return mergeObject(super.defaultOptions, {\n          title: \"Relationship Tracker\",\n          id: \"relationship-tracker-app\",\n          template: null,\n          popOut: true,\n          width: 1000,\n          height: 700,\n          resizable: true,\n          classes: [\"relationship-tracker-window\"],\n          minimizable: true,\n          scrollY: [\".relationship-content\"],  // Define main scrollable area\n      });\n  }\n  constructor(actor) {\n      super();\n      this.actor = actor;\n      this.isGM = game.user.isGM;\n\n      // Initialize empty relationships\n      this.relationships = {\n          chombatta: [],\n          ally: [],\n          partnerInCrime: [],\n          acquaintance: [],\n          neutral: [],\n          irritant: [],\n          rival: [],\n          adversary: [],\n          nemesis: [],\n          archNemesis: []\n      };\n\n      this.colors = {\n          chombatta: \"#00FF00\",\n          ally: \"#4CAF50\",\n          partnerInCrime: \"#2196F3\",\n          acquaintance: \"#00BCD4\",\n          neutral: \"#FFEB3B\",\n          irritant: \"#FF9800\",\n          rival: \"#F44336\",\n          adversary: \"#E91E63\",\n          nemesis: \"#9C27B0\",\n          archNemesis: \"#B71C1C\"\n      };\n\n      // Load and validate saved data\n      const saved = this.actor.getFlag(\"world\", \"relationships\");\n      if (saved) {\n          // Validate each category\n          Object.keys(this.relationships).forEach(category => {\n              if (saved[category]) {\n                  // Filter out invalid entries\n                  this.relationships[category] = saved[category].filter(entry => {\n                      // Check if the actor exists and has valid data\n                      const actor = game.actors.get(entry.id);\n                      if (!actor) return false;\n                      \n                      // Ensure value is a valid number\n                      if (typeof entry.value !== 'number') return false;\n                      if (isNaN(entry.value)) return false;\n                      \n                      return true;\n                  });\n              }\n          });\n          \n          // Save the cleaned data back if it was changed\n          if (JSON.stringify(saved) !== JSON.stringify(this.relationships)) {\n              this.actor.setFlag(\"world\", \"relationships\", this.relationships);\n          }\n      }\n\n      // Load and validate notes\n      this.notes = this.actor.getFlag(\"world\", \"relationshipNotes\") || {};\n      // Clean up notes for non-existent actors\n      Object.keys(this.notes).forEach(actorId => {\n          if (!game.actors.get(actorId)) {\n              delete this.notes[actorId];\n          }\n      });\n\n      // Load and validate tags\n      this.tags = this.actor.getFlag(\"world\", \"relationshipTags\") || {};\n      // Clean up tags for non-existent actors\n      Object.keys(this.tags).forEach(actorId => {\n          if (!game.actors.get(actorId)) {\n              delete this.tags[actorId];\n          }\n      });\n  }\n\n  getData() {\n      // Restore collapsed states\n      const collapsedCategories = game.user.getFlag(\"world\", \"relationshipCollapsedCategories\") || [];\n      // Organize relationships based on their values\n      const organizedRelationships = this.organizeRelationships();\n\n      // Get all relationships and only create lovers category if we find tagged lovers\n      const allRelationships = Object.values(this.relationships).flat();\n      const hasLovers = allRelationships.some(rel => {\n          const actorTags = this.tags[rel.id] || [];\n          return actorTags.some(tag => tag.toLowerCase() === 'lover');  // Case insensitive check\n      });\n\n      if (hasLovers) {\n          // Only create and populate lovers category if we have lovers\n          organizedRelationships.lover = allRelationships.filter(rel => {\n              const actorTags = this.tags[rel.id] || [];\n              return actorTags.some(tag => tag.toLowerCase() === 'lover');  // Case insensitive check\n          });\n      }\n\n      return {\n          actorName: this.actor?.name || \"Unknown\",\n          relationships: organizedRelationships,\n          categories: Object.keys(RelationshipTrackerApp.RELATIONSHIP_TIERS).filter(\n              category => organizedRelationships[category] && organizedRelationships[category].length > 0\n          ),\n          relationshipTiers: RelationshipTrackerApp.RELATIONSHIP_TIERS,\n          colors: {\n              lover: \"#FF69B4\",\n              ...this.colors\n          },\n          isGM: this.isGM,\n          notes: this.notes,\n          tags: this.tags,\n          collapsedCategories: collapsedCategories\n      };\n  }\n\n        // Add these methods to your class\n        getCategoryForValue(value) {\n            for (const [category, data] of Object.entries(RelationshipTrackerApp.RELATIONSHIP_TIERS)) {\n                if (value >= data.range[0] && value <= data.range[1]) {\n                    return category;\n                }\n            }\n            return 'neutral'; // Default fallback\n        }\n\n        organizeRelationships() {\n            const organized = {};\n            \n            // Initialize all categories as empty arrays, EXCEPT lover\n            Object.keys(RelationshipTrackerApp.RELATIONSHIP_TIERS)\n                .filter(category => category !== 'lover') // Exclude lover category\n                .forEach(category => {\n                    organized[category] = [];\n                });\n\n            // Get all relationships from all categories\n            const allRelationships = [];\n            Object.values(this.relationships).forEach(categoryRelationships => {\n                allRelationships.push(...categoryRelationships);\n            });\n\n            // Sort relationships into their proper categories based on value\n            allRelationships.forEach(rel => {\n                // Skip the lover category in normal categorization\n                const properCategory = this.getCategoryForValue(rel.value);\n                const actorTags = this.tags[rel.id] || [];\n                const isLover = actorTags.some(tag => tag.toLowerCase() === 'lover');\n\n                // Only add to value-based category if they're not a lover\n                if (properCategory !== 'lover' && !isLover) {\n                    organized[properCategory].push(rel);\n                }\n            });\n\n            return organized;\n        }\n\n        getCategoryForValue(value) {\n            for (const [category, data] of Object.entries(RelationshipTrackerApp.RELATIONSHIP_TIERS)) {\n                if (category === 'lover') continue; // Skip lover category in value-based categorization\n                if (value >= data.range[0] && value <= data.range[1]) {\n                    return category;\n                }\n            }\n            return 'neutral'; // Default fallback\n        }\n\n    activateListeners(html) {\n        super.activateListeners(html);\n\n        // Collapse functionality for all users\n        html.find('.category-header').on('click', (event) => {\n            const header = $(event.currentTarget);\n            const category = header.data('category');\n            const content = header.next('.category-content');\n            \n            // Toggle collapse\n            content.slideToggle(200);\n            header.find('.collapse-arrow').toggleClass('fa-chevron-down fa-chevron-right');\n        });\n\n        if (this.isGM) {\n            // Existing listeners\n            html.find(\".global-add-actor\").on(\"click\", this._openGlobalAddActorDialog.bind(this));\n            html.find(\".relationship-bar-wrapper\").on(\"click\", this._onRelationshipBarClick.bind(this));\n            html.find(\".remove-character\").on(\"click\", this._onRemoveCharacter.bind(this));\n            html.find(\".edit-notes\").on(\"click\", this._onEditNotes.bind(this));\n            html.find(\".edit-tags\").on(\"click\", this._onEditTags.bind(this));\n            html.find('.reset-relationships').on('click', this._onResetRelationships.bind(this));\n\n            // Value adjustment buttons\n            html.find(\".value-btn.decrease\").on(\"click\", this._onDecreaseValue.bind(this));\n            html.find(\".value-btn.increase\").on(\"click\", this._onIncreaseValue.bind(this));\n            html.find(\".value-btn.decrease-10\").on(\"click\", this._onDecreaseValue10.bind(this));\n            html.find(\".value-btn.increase-10\").on(\"click\", this._onIncreaseValue10.bind(this));\n            html.find(\".value-input\").on(\"change\", this._onValueInputChange.bind(this));\n            html.find(\".quick-value\").on(\"click\", this._onQuickValue.bind(this));\n\n            // Deep Clean Relationship Data\n            html.find('.force-reset-relationships').on('click', async (event) => {\n                event.preventDefault();\n                new Dialog({\n                    title: \"Force Clean Relationship Data\",\n                    content: `<p>This will attempt to remove all relationship data and reset to a clean state. Use this if you're experiencing data corruption issues.</p>`,\n                    buttons: {\n                        yes: {\n                            icon: '<i class=\"fas fa-check\"></i>',\n                            label: \"Clean Data\",\n                            callback: () => this._deepCleanData()\n                        },\n                        no: {\n                            icon: '<i class=\"fas fa-times\"></i>',\n                            label: \"Cancel\"\n                        }\n                    },\n                    default: \"no\"\n                }).render(true);\n            });\n\n\n            // Drag and drop\n            html.find(\".portrait-container\").each((_, el) => {\n                el.setAttribute(\"draggable\", true);\n                el.addEventListener(\"dragstart\", this._onDragStart.bind(this));\n            });\n\n            html.find(\".category\").each((_, el) => {\n                el.addEventListener(\"dragover\", this._onDragOver.bind(this));\n                el.addEventListener(\"drop\", this._onDrop.bind(this));\n            });\n        } else {\n            html.find(\".relationship-bar-wrapper\").on(\"click\", () => {\n                ui.notifications.warn(\"You cannot edit relationships as a player.\");\n            });\n        }\n    }\n\n    async _renderInner() {\n      const { actorName, relationships, categories, colors, isGM, notes, tags, collapsedCategories, relationshipTiers } = this.getData();\n\n        const content = `\n        <style>\n            .relationship-tracker-window {\n                background: #1A1A1A !important;\n                color: #FFFFFF;\n            }\n            /* Target the inner window content */\n            .relationship-tracker-window .window-content {\n                background: #1A1A1A !important;\n                padding: 0 !important;\n                margin: 0 !important;\n            }\n\n            /* Target any potential parent containers */\n            .relationship-tracker-window .app {\n                background: #1A1A1A !important;\n            }\n            .relationship-tracker {\n                margin: 0 !important;\n                padding: 1em !important;\n                background: #1A1A1A !important;\n                height: 100% !important;\n                width: 100% !important;\n            }\n            /* Window header override */\n            .relationship-tracker-window .window-header {\n                background: #1A1A1A !important;\n                color: #FFFFFF !important;\n            }\n            /* Target the window header */\n            .relationship-tracker-window .window-header {\n                background: #1A1A1A !important;\n                border-bottom: 1px solid #333 !important;\n            }\n            /* Form fields override for dialogs */\n            .relationship-tracker-window input,\n            .relationship-tracker-window select,\n            .relationship-tracker-window textarea {\n                background: #333 !important;\n                color: #FFFFFF !important;\n                border-color: #666 !important;\n            }\n            .relationship-content {\n              flex: 1;\n              overflow-y: auto;\n              padding: 15px;\n              background: #1A1A1A;\n            }\n            \n            .header {\n              position: sticky;\n              top: 0;\n              z-index: 2;\n              background: #1A1A1A;\n              display: flex;\n              justify-content: space-between;\n              align-items: center;\n              padding: 10px 15px;\n              margin-bottom: 10px;\n              color: #FFFFFF;\n              font-size: 1.2em;\n              text-transform: uppercase;\n              border-bottom: 2px solid #4CAF50;\n            }\n\n           .category-row {\n            margin-bottom: 15px;\n            border-radius: 5px;\n            overflow: hidden;\n           }\n\n           .category-header {\n               display: flex;\n               align-items: center;\n               gap: 10px;\n               cursor: pointer;\n               padding: 8px 15px;\n               transition: background-color 0.3s ease;\n           }\n\n               /* Category-specific header colors */\n               .category-header.lover-header { background-color: rgb(178, 34, 34); }\n               .category-header.chombatta-header { background-color: rgb(45, 103, 45); }\n               .category-header.ally-header { background-color: rgb(50, 100, 50); }\n               .category-header.partnerInCrime-header { background-color: rgb(41, 82, 123); }\n               .category-header.acquaintance-header { background-color: rgb(38, 95, 102); }\n               .category-header.neutral-header { background-color: rgb(102, 98, 39); }\n               .category-header.irritant-header { background-color: rgb(102, 72, 39); }\n               .category-header.rival-header { background-color: rgb(102, 39, 39); }\n               .category-header.adversary-header { background-color: rgb(102, 39, 65); }\n               .category-header.nemesis-header { background-color: rgb(77, 39, 102); }\n               .category-header.archNemesis-header { background-color: rgb(102, 39, 39); }\n\n               /* Category-specific content backgrounds */\n               .category-content.lover-content { background-color: rgba(178, 34, 34, 0.1); }\n               .category-content.chombatta-content { background-color: rgb(60, 95, 60, 0.1); }\n               .category-content.ally-content { background-color: rgb(65, 90, 65, 0.1); }\n               .category-content.partnerInCrime-content { background-color: rgb(41, 82, 123, 0.1); }\n               .category-content.acquaintance-content { background-color: rgb(38, 95, 102, 0.1); }\n               .category-content.neutral-content { background-color: rgb(102, 98, 39, 0.1); }\n               .category-content.irritant-content { background-color: rgb(102, 72, 39, 0.1); }\n               .category-content.rival-content { background-color: rgb(102, 39, 39, 0.1); }\n               .category-content.adversary-content { background-color: rgb(102, 39, 65, 0.1); }\n               .category-content.nemesis-content { background-color: rgb(77, 39, 102, 0.1); }\n               .category-content.archNemesis-content { background-color: rgb(102, 39, 39, 0.1); }\n\n \n    .category-title {\n        color: #000;\n        font-weight: bold;\n        text-shadow: 0 1px 1px rgba(255, 255, 255, 0.5);\n    }\n\n    .category-count {\n        color: rgba(0, 0, 0, 0.7);\n        font-size: 0.9em;\n    }\n\n    .collapse-arrow {\n        color: rgba(0, 0, 0, 0.7);\n    }\n\n    .category-content {\n     display: flex;\n     flex-direction: row;  /* Ensure horizontal layout */\n     flex-wrap: nowrap;    /* Prevent wrapping */\n     gap: 15px;\n     overflow-x: scroll;\n     overflow-y: hidden;\n     padding: 15px;\n     padding-bottom: 20px;\n     margin-bottom: 4px;\n     min-height: min-content;\n    }\n\n    /* Make the container for cards scrollable */\n    .category-cards-container {\n        display: flex;\n        gap: 15px;\n        min-width: min-content;\n    }\n\n    .category-cards-container {\n        display: inline-flex;\n        gap: 15px;\n        /* Prevent wrapping */\n        flex-wrap: nowrap;\n    }\n\n    .category-content.collapsed {\n        max-height: 0;\n        opacity: 0;\n        padding: 0 15px;\n        overflow: hidden;\n    }\n\n    /* Scrollbar styles */\n    .relationship-tracker-window .category-content {\n        scrollbar-width: auto !important;\n        -ms-overflow-style: auto !important;\n        position: relative;\n        padding: 15px;\n        overflow-x: scroll !important;\n        overflow-y: hidden;\n        padding-bottom: 20px;\n        white-space: nowrap;\n        margin-bottom: 4px;\n        background-clip: padding-box;\n    }\n\n    .relationship-tracker-window .category-content::-webkit-scrollbar {\n        height: 12px !important;\n        display: block !important;\n        background: transparent;\n    }\n\n    .relationship-tracker-window .category-content::-webkit-scrollbar-track {\n        background: #2a2a2a !important;\n        border-radius: 6px;\n        margin: 2px;\n    }\n\n    .relationship-tracker-window .category-content::-webkit-scrollbar-thumb {\n        background: #4a4a4a !important;\n        border-radius: 6px;\n        border: 2px solid #2a2a2a;\n    }\n\n    .relationship-tracker-window .category-content::-webkit-scrollbar-thumb:hover {\n        background: #5a5a5a !important;\n    }\n\n    /* Firefox scrollbar */\n    .relationship-tracker-window {\n        scrollbar-color: #4a4a4a #2a2a2a !important;\n    }\n\n\n    .portrait-container {\n        background: #333;\n        border-radius: 10px;\n        padding: 12px;\n        /* Base size */\n        width: 5em;\n        /* Prevent shrinking */\n        flex-shrink: 0;\n        /* Enable growing if space available */\n        flex-grow: 0;\n        /* Allow basis to be overridden by media queries */\n        flex-basis: 180px;\n        display: flex;\n        flex-direction: column;\n        gap: 8px;\n        color:#ffffff;\n    }\n\n    .portrait {\n        display: flex;\n        justify-content: center;\n    }\n\n    .portrait img {\n        width: 100%;\n        object-fit: cover;\n        border-radius: 50%;\n        border: 2px solid #666;\n    }\n\n     .global-add-actor {\n       background: #336;\n       color: white;\n       border: none;\n       border-radius: 3px;\n       padding: 4px 8px;\n       cursor: pointer;\n       font-size: 0.9em;\n       transition: background-color 0.2s;\n     }\n\n     .global-add-actor:hover {\n         background: #447;\n     }\n\n     .actor-name {\n         font-size: clamp(0.9rem, 1.5vw, 1.1rem);\n         white-space: normal;\n         overflow: scroll;\n         text-overflow: clip;\n         text-align: center;\n     }\n\n     .relationship-bar-container {\n       position: relative;\n       background: rgba(0,0,0,0.2);\n       border-radius: 6px;\n     }\n     .relationship-bar {\n         height: 10px;\n         border-radius: 5px;\n     }\n     .tags {\n       display: flex;\n       justify-content: center;\n     }\n     .tag {\n       background: #444;\n       color: #FFF;\n       padding: 3px 8px;\n       border-radius: 12px;\n       font-size: 0.8em;\n       box-shadow: 0 1px 2px rgba(0,0,0,0.2);\n     }\n     .relationship-bar-wrapper {\n       height: 20px;\n       background: #2a2a2a;\n       border-radius: 10px;\n       display: flex;\n       align-items: center;\n       overflow: hidden;\n       cursor: ${this.isGM ? 'pointer' : 'default'};\n       box-shadow: inset 0 2px 4px rgba(0,0,0,0.2);\n      }\n      \n      .relationship-bar-half {\n          width: 50%;\n          height: 100%;\n          position: relative;\n      }\n      \n      .left-half {\n          border-right: 1px solid #666;\n      }\n      \n      .right-half {\n          border-left: 1px solid #666;\n      }\n      \n      .relationship-bar-negative {\n       height: 100%;\n        background: linear-gradient(to right, #b71c1c, #f44336);\n        transition: width 0.3s ease;\n        position: absolute;\n        right: 0;\n      }\n      \n      .relationship-bar-positive {\n       height: 100%;\n       background: linear-gradient(to right, #4caf50, #2e7d32);\n       transition: width 0.3s ease;\n       position: absolute;\n       left: 0;\n      }\n      \n      .relationship-bar-center {\n       position: absolute;\n       left: 50%;\n       transform: translateX(-50%);\n       color: white;\n       font-weight: bold;\n       text-shadow: 1px 1px 2px rgba(0,0,0,0.8);\n       pointer-events: none;\n       z-index: 1;\n       font-size: 0.9em;\n      }\n\n      .relationship-controls {\n       position: absolute;\n           top: 2px;\n           left: 50%;\n           transform: translateX(-50%);\n           background: rgba(40, 40, 40, 0.95);\n           border-radius: 4px;\n           padding: 2px 4px;\n           display: flex;\n           white-space: nowrap;\n           z-index: 10;\n           gap: 2px;\n           align-items: center;\n           box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n      }\n\n      .relationship-bar-container:hover .relationship-controls {\n          display: flex;\n          align-items: center;\n          gap: 5px;\n      }\n\n      .value-controls {\n          display: flex;\n          flex-direction: column;\n          gap: 4px;\n      }\n\n      .value-adjusters {\n       display: flex;\n       justify-content: center;\n       gap: 2px;\n       flex-wrap: nowrap;\n      }\n\n      .value-btn {\n       background: #444;\n       color: white;\n       border: none;\n       border-radius: 3px;\n       padding: 2px 4px;\n       cursor: pointer;\n       font-size: clamp(9px, 1.5vw, 11px);\n       line-height: 1;\n      }\n\n      .value-btn:hover {\n       background: #555;\n      }\n\n      .value-input {\n       width: clamp(30px, 4vw, 40px);\n       font-size: clamp(9px, 1.5vw, 11px);\n       text-align: center;\n       background: #333;\n       color: white;\n       border: 1px solid #555;\n       border-radius: 3px;\n       padding: 1px 2px;\n      }\n\n      .quick-controls {\n       display: flex;\n       justify-content: center;\n       gap: 4px;\n      }\n\n      .quick-value {\n       background: #444;\n         color: #ddd;\n         border: none;\n         border-radius: 3px;\n         padding: 2px 6px;\n         font-size: 10px;\n         cursor: pointer;\n      }\n\n      .quick-value:hover {\n       background: #555;\n       color: white;\n      }\n\n      .notes {\n       font-size: clamp(0.8rem, 1.5vw, 0.9rem);\n       overflow: hidden;\n       text-overflow: ellipsis;\n       display: -webkit-box;\n       -webkit-line-clamp: 3;\n       -webkit-box-orient: vertical;\n       white-space: normal;\n      }\n\n      .controls {\n          margin-top: 10px;\n      }\n\n      .control-button {\n          background: #666;\n          color: white;\n          border: none;\n          border-radius: 4px;\n          padding: 4px 8px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n      }\n\n      .control-button:hover {\n          background: #777;\n      }\n\n      .header-controls {\n       display: flex;\n       gap: 10px;\n       align-items: center;\n      }\n\n      .reset-relationships {\n       background: #633;\n       color: white;\n       border: none;\n       border-radius: 3px;\n       padding: 4px 8px;\n       cursor: pointer;\n       font-size: 0.9em;\n       transition: background-color 0.2s;\n      }\n\n      .reset-relationships:hover {\n          background: #844;\n      }\n\n      /* Style the edit buttons */\n      .edit-notes, .edit-tags {\n       background: #555;\n       color: white;\n       border: none;\n       border-radius: 3px;\n       padding: 2px 6px;\n       font-size: 0.8em;\n       cursor: pointer;\n       margin-left: 4px;\n      }\n\n      .remove-character {\n          background: #633;\n          color: white;\n          border: none;\n          border-radius: 3px;\n          padding: 4px 8px;\n          cursor: pointer;\n          width: 100%;\n          margin-top: 4px;\n      }\n\n      .remove-character:hover {\n          background: #744;\n      }\n\n      .edit-notes:hover, .edit-tags:hover {\n          background: #666;\n      }\n\n      /* Update header text color for better visibility */\n      .category-header .category-title {\n          color: #fff;\n          text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);\n      }\n\n      .category-header .category-count {\n          color: rgba(255, 255, 255, 0.8);\n      }\n\n      .category-header .collapse-arrow {\n          color: rgba(255, 255, 255, 0.8);\n      }\n\n      .category-info {\n          flex: 1;\n      }\n\n      .category-title-row {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n      }\n\n      .category-range {\n          font-size: 0.8em;\n          opacity: 0.8;\n      }\n\n      /* Dialog overrides */\n      .dialog.relationship-tracker-dialog {\n          background: #1A1A1A !important;\n          color: #FFFFFF !important;\n      }\n\n      .dialog.relationship-tracker-dialog .dialog-content {\n          background: #1A1A1A !important;\n          color: #FFFFFF !important;\n      }\n\n      .dialog.relationship-tracker-dialog .dialog-buttons {\n          background: #1A1A1A !important;\n      }\n\n\n      /* Responsive breakpoints for cards */\n      @media (max-width: 1400px) {\n          .portrait-container {\n              width: 160px;\n              flex-basis: 160px;\n          }\n      }\n\n      @media (max-width: 1200px) {\n          .portrait-container {\n              width: 150px;\n              flex-basis: 150px;\n          }\n          \n      }\n\n      @media (max-width: 992px) {\n          .portrait-container {\n              width: 140px;\n              flex-basis: 140px;\n              padding: 10px;\n          }\n          \n          .value-controls {\n           display: flex;\n           flex-direction: column;\n           gap: 4px;\n          }\n          \n          .value-btn {\n              padding: 1px 3px;\n          }\n      }\n\n      @media (max-width: 768px) {\n          .portrait-container {\n              min-width: 160px;\n              width: 160px;\n          }\n          \n          .header {\n              font-size: 1em;\n              padding: 8px 12px;\n          }\n      }\n\n                    </style>\n                    <div class=\"relationship-tracker\">\n                        <div class=\"header\">\n                            <div>${actorName} - Relationships</div>\n                            ${isGM ? `\n                                <div class=\"header-controls\">\n                                    <button class=\"reset-relationships\">Reset All</button>\n                                    <button class=\"global-add-actor\">Add Actor</button>\n                                </div>\n                            ` : \"\"}\n                        </div>\n                        ${categories.map(category => `\n                            <div class=\"category-row\" data-category=\"${category}\">\n                                <div class=\"category-header ${category}-header\" data-category=\"${category}\">\n                                    <i class=\"fas fa-chevron-down collapse-arrow\"></i>\n                                    <div class=\"category-info\">\n                                        <div class=\"category-title-row\">\n                                            <div class=\"category-title\">${RelationshipTrackerApp.RELATIONSHIP_TIERS[category].title}</div>\n                                            <div class=\"category-count\">(${relationships[category].length})</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"category-content ${category}-content\">\n                                    ${relationships[category].map(entry => this._renderActorCard(entry, notes, tags)).join(\"\")}\n                                </div>\n                            </div>\n                        `).join(\"\")}\n                    </div>\n                `;\n\n                const element = document.createElement(\"div\");\n                element.innerHTML = content.trim();\n                return $(element);\n            }\n\n\n_renderActorCard(entry, notes, tags) {\n    const actor = game.actors.get(entry.id);\n    if (!actor) return \"\";\n\n    const value = entry.value;\n    const leftWidth = value < 0 ? Math.abs(value) : 0;\n    const rightWidth = value > 0 ? value : 0;\n    \n    const actorTags = tags[entry.id] || [];\n    const actorNotes = notes[entry.id] || \"No notes available.\";\n    \n    return `\n        <div class=\"portrait-container\" data-char-id=\"${entry.id}\">\n            <div class=\"portrait\">\n                <img src=\"${actor.img || \"icons/svg/mystery-man.svg\"}\" alt=\"${actor.name}\">\n            </div>\n            \n            <div class=\"actor-name\">${actor.name}</div>\n            \n            <div class=\"tags\">\n                ${actorTags.length > 0 \n                    ? actorTags.map(tag => `<span class=\"tag\">${tag}</span>`).join(\"\") \n                    : ''}\n                ${this.isGM ? `<button class=\"edit-tags\" data-char-id=\"${actor.id}\">Edit Tags</button>` : \"\"}\n            </div>\n\n            <div class=\"relationship-bar-container\">\n                <div class=\"relationship-bar-wrapper\">\n                    <div class=\"relationship-bar-half left-half\">\n                        <div class=\"relationship-bar-negative\" style=\"width: ${leftWidth}%;\"></div>\n                    </div>\n                    <div class=\"relationship-bar-center\">${value}</div>\n                    <div class=\"relationship-bar-half right-half\">\n                        <div class=\"relationship-bar-positive\" style=\"width: ${rightWidth}%;\"></div>\n                    </div>\n                </div>\n            </div>\n\n            ${this.isGM ? `\n                <div class=\"value-controls\">\n                    <div class=\"value-adjusters\">\n                        <button class=\"value-btn decrease-10\" title=\"Decrease by 10\">-10</button>\n                        <button class=\"value-btn decrease\" title=\"Decrease by 1\">-</button>\n                        <input type=\"number\" class=\"value-input\" value=\"${value}\" min=\"-100\" max=\"100\">\n                        <button class=\"value-btn increase\" title=\"Increase by 1\">+</button>\n                        <button class=\"value-btn increase-10\" title=\"Increase by 10\">+10</button>\n                    </div>\n                    <div class=\"quick-controls\">\n                        <button class=\"quick-value\" data-value=\"-100\">Min</button>\n                        <button class=\"quick-value\" data-value=\"0\">0</button>\n                        <button class=\"quick-value\" data-value=\"100\">Max</button>\n                    </div>\n                </div>\n            ` : \"\"}\n\n            <div class=\"notes\">\n                <span>${actorNotes}</span>\n                ${this.isGM ? `<button class=\"edit-notes\" data-char-id=\"${actor.id}\">Edit Notes</button>` : \"\"}\n            </div>\n\n            ${this.isGM ? `\n                <div class=\"controls\">\n                    <button class=\"control-button remove-character\" data-char-id=\"${entry.id}\">Remove</button>\n                </div>\n            ` : \"\"}\n        </div>\n    `;\n}\n\n    _calculateBarColor(value) {\n        if (value >= 75) return \"#4caf50\";\n        if (value >= 50) return \"#8bc34a\";\n        if (value >= 25) return \"#2196f3\";\n        if (value >= 0) return \"#00bcd4\";\n        if (value >= -25) return \"#ff9800\";\n        if (value >= -50) return \"#e91e63\";\n        if (value >= -75) return \"#f44336\";\n        if (value >= -100) return \"#b71c1c\";\n        return \"#9e9e9e\";\n    }\n\n async _openGlobalAddActorDialog() {\n     // Get available actors not already in the relationships\n     const availableActors = game.actors.contents.filter(\n         actor => !Object.values(this.relationships).flat().some(rel => rel.id === actor.id)\n     );\n\n     if (!availableActors.length) {\n         ui.notifications.warn(\"No available actors to add.\");\n         return;\n     }\n\n     // Prepare initial dropdown options\n     const options = availableActors\n         .map(actor => `<option value=\"${actor.id}\">${actor.name}</option>`)\n         .join(\"\");\n\n     // Create and render the dialog with a search bar\n     new Dialog({\n         title: \"Add Actor to Relationship Tracker\",\n         content: `\n             <form>\n                 <div class=\"form-group\">\n                     <label>Search Actor:</label>\n                     <input type=\"text\" id=\"actor-search\" placeholder=\"Type to search...\" style=\"width: 100%;\" />\n                 </div>\n                 <div class=\"form-group\">\n                     <label>Select Actor:</label>\n                     <select id=\"actor-select\" size=\"5\" style=\"width: 100%; height: 150px;\">\n                         ${options}\n                     </select>\n                 </div>\n                 <div class=\"form-group\">\n                     <label>Initial Relationship Value:</label>\n                     <input type=\"number\" id=\"relationship-value\" value=\"50\" min=\"-100\" max=\"100\" />\n                 </div>\n                 <div class=\"form-group\">\n                     <label>Tags (optional):</label>\n                     <input type=\"text\" id=\"actor-tags\" placeholder=\"Comma-separated tags (e.g., friend, ally)\" />\n                 </div>\n                 <div class=\"form-group\">\n                     <label>Notes (optional):</label>\n                     <textarea id=\"actor-notes\" rows=\"3\" placeholder=\"Add any notes for this actor...\"></textarea>\n                 </div>\n             </form>\n         `,\n         buttons: {\n             add: {\n                 label: \"Add Actor\",\n                 callback: this._addActorCallback.bind(this)\n             },\n             cancel: {\n                 label: \"Cancel\"\n             }\n         },\n         render: (html) => {\n             // Attach event listener for the search bar\n             html.find(\"#actor-search\").on(\"input\", (event) => {\n                 const searchTerm = event.target.value.toLowerCase();\n                 const actorSelect = html.find(\"#actor-select\");\n\n                 // Filter actors based on search term\n                 actorSelect.html(\n                     availableActors\n                         .filter(actor => actor.name.toLowerCase().includes(searchTerm))\n                         .map(actor => `<option value=\"${actor.id}\">${actor.name}</option>`)\n                         .join(\"\")\n                 );\n             });\n         }\n     }).render(true);\n }\n\n// Relationship Bar\nasync _onRelationshipBarClick(event) {\n    if (!this.isGM) return;\n\n    const container = $(event.currentTarget).closest(\".portrait-container\");\n    const charId = container.data(\"char-id\");\n    const category = container.closest(\".category-row\").data(\"category\");\n\n    if (!charId || !category) {\n        ui.notifications.error(\"Character or category data missing.\");\n        return;\n    }\n\n    const rect = event.currentTarget.getBoundingClientRect();\n    const clickX = event.clientX - rect.left;\n    const totalWidth = rect.width;\n    \n    // Calculate value based on click position\n    // Convert click position to -100 to 100 range\n    const centerPoint = totalWidth / 2;\n    let value;\n    \n    if (clickX < centerPoint) {\n        // Left side: map 0 to centerPoint to -100 to 0\n        value = Math.round((clickX - centerPoint) / centerPoint * 100);\n    } else {\n        // Right side: map centerPoint to totalWidth to 0 to 100\n        value = Math.round((clickX - centerPoint) / centerPoint * 100);\n    }\n    \n    // Clamp value between -100 and 100\n    value = Math.max(-100, Math.min(100, value));\n    \n    const relationship = this.relationships[category].find(rel => rel.id === charId);\n    if (relationship) {\n        relationship.value = value;\n        await this.actor.setFlag(\"world\", \"relationships\", this.relationships);\n        this.render(false);\n    }\n}\n\n// Actor Callback\nasync _addActorCallback(html) {\n    // Get input values from the dialog\n    const actorId = html.find(\"#actor-select\").val();\n    const value = parseInt(html.find(\"#relationship-value\").val());\n    const tags = html.find(\"#actor-tags\").val()\n        .split(\",\")\n        .map(tag => tag.trim())\n        .filter(tag => tag.length > 0);\n    const notes = html.find(\"#actor-notes\").val();\n\n    // Validate inputs\n    if (!actorId || isNaN(value)) {\n        ui.notifications.error(\"Invalid input. Please check your values.\");\n        return;\n    }\n\n    try {\n        // Determine the correct category based on value\n        const category = this.getCategoryForValue(value);\n\n        // Initialize category array if it doesn't exist\n        if (!this.relationships[category]) {\n            this.relationships[category] = [];\n        }\n\n        // Add actor to the relationships in the correct category\n        this.relationships[category].push({ id: actorId, value });\n\n        // Save the updated relationships to the actor's flags\n        await this.actor.setFlag(\"world\", \"relationships\", this.relationships);\n\n        // Save tags and notes (if provided)\n        if (tags.length) {\n            this.tags[actorId] = tags;\n            await this.actor.setFlag(\"world\", \"relationshipTags\", this.tags);\n        }\n        if (notes) {\n            this.notes[actorId] = notes;\n            await this.actor.setFlag(\"world\", \"relationshipNotes\", this.notes);\n        }\n\n        // Notify the user and re-render the app\n        ui.notifications.info(`Added ${game.actors.get(actorId).name} to relationships.`);\n        this.render(false);\n    } catch (error) {\n        console.error(\"Error adding actor:\", error);\n        ui.notifications.error(\"An error occurred while adding the actor.\");\n    }\n}\n\n    // Add a specific method for handling collapse\n    async _onCategoryCollapse(event) {\n        const header = $(event.currentTarget);\n        const content = header.next('.category-content');\n        const category = header.closest('.category-row').data('category');\n        \n        header.toggleClass('collapsed');\n        content.toggleClass('collapsed');\n        \n        // Store the collapsed state per user\n        const collapsedCategories = game.user.getFlag(\"world\", \"relationshipCollapsedCategories\") || [];\n        \n        if (header.hasClass('collapsed')) {\n            if (!collapsedCategories.includes(category)) {\n                collapsedCategories.push(category);\n            }\n        } else {\n            const index = collapsedCategories.indexOf(category);\n            if (index > -1) {\n                collapsedCategories.splice(index, 1);\n            }\n        }\n        \n        await game.user.setFlag(\"world\", \"relationshipCollapsedCategories\", collapsedCategories);\n    }\n\n    // Edit Notes Function\n    async _onEditNotes(event) {\n        const charId = event.currentTarget.dataset.charId;\n        const actor = game.actors.get(charId);\n        const currentNotes = this.notes[charId] || \"\";\n\n        new Dialog({\n            title: `Edit Notes for ${actor.name}`,\n            content: `\n                <form>\n                    <div class=\"form-group\">\n                        <textarea id=\"edit-notes\" rows=\"5\" style=\"width: 100%;\">${currentNotes}</textarea>\n                    </div>\n                </form>\n            `,\n            buttons: {\n                save: {\n                    label: \"Save\",\n                    callback: async html => {\n                        const notes = html.find(\"#edit-notes\").val();\n                        this.notes[charId] = notes;\n                        await this.actor.setFlag(\"world\", \"relationshipNotes\", this.notes);\n                        ui.notifications.info(`Notes updated for ${actor.name}.`);\n                        this.render(false);\n                    }\n                },\n                cancel: { label: \"Cancel\" }\n            }\n        }).render(true);\n    }\n\n\n    // Edit Tags Function\n    async _onEditTags(event) {\n        const charId = event.currentTarget.dataset.charId;\n        const actor = game.actors.get(charId);\n        const currentTags = this.tags[charId] || [];\n\n        new Dialog({\n            title: `Edit Tags for ${actor.name}`,\n            content: `\n                <form>\n                    <div class=\"form-group\">\n                        <input type=\"text\" id=\"edit-tags\" value=\"${currentTags.join(\", \")}\" style=\"width: 100%;\" />\n                        <small>Enter tags separated by commas.</small>\n                    </div>\n                </form>\n            `,\n            buttons: {\n                save: {\n                    label: \"Save\",\n                    callback: async (html) => {\n                        const tags = html.find(\"#edit-tags\").val()\n                            .split(\",\")\n                            .map(tag => tag.trim())\n                            .filter(tag => tag.length > 0);\n                        this.tags[charId] = tags;\n                        await this.actor.setFlag(\"world\", \"relationshipTags\", this.tags);\n                        ui.notifications.info(`Tags updated for ${actor.name}.`);\n                        this.render(false);\n                    }\n                },\n                cancel: { label: \"Cancel\" }\n            }\n        }).render(true);\n    }\n\n\n    async _onEditTags(event) {\n        const charId = event.currentTarget.dataset.charId;\n        const actor = game.actors.get(charId);\n        const currentTags = this.tags[charId] || [];\n\n        new Dialog({\n            title: `Edit Tags for ${actor.name}`,\n            content: `\n                <form>\n                    <div class=\"form-group\">\n                        <input type=\"text\" id=\"edit-tags\" value=\"${currentTags.join(\", \")}\" style=\"width: 100%;\" />\n                        <small>Enter tags separated by commas.</small>\n                    </div>\n                </form>\n            `,\n            buttons: {\n                save: {\n                    label: \"Save\",\n                    callback: async html => {\n                        const tags = html.find(\"#edit-tags\").val()\n                            .split(\",\")\n                            .map(tag => tag.trim())\n                            .filter(tag => tag.length > 0);\n                        this.tags[charId] = tags;\n                        await this.actor.setFlag(\"world\", \"relationshipTags\", this.tags);\n                        ui.notifications.info(`Tags updated for ${actor.name}.`);\n                        this.render(false);\n                    }\n                },\n                cancel: { label: \"Cancel\" }\n            }\n        }).render(true);\n    }\n\n    // Reset Relationships\n    async _onResetRelationships(event) {\n        event.preventDefault();\n        \n        // Show a confirmation dialog\n        new Dialog({\n            title: \"Reset Relationships\",\n            content: `<p>Are you sure you want to reset all relationships? This will clear all relationship data for ${this.actor.name}.</p>`,\n            buttons: {\n                yes: {\n                    icon: '<i class=\"fas fa-check\"></i>',\n                    label: \"Reset\",\n                    callback: async () => {\n                        try {\n                            // Reset the relationships object to empty arrays\n                            this.relationships = {\n                                chombatta: [],\n                                ally: [],\n                                partnerInCrime: [],\n                                acquaintance: [],\n                                neutral: [],\n                                irritant: [],\n                                rival: [],\n                                adversary: [],\n                                nemesis: [],\n                                archNemesis: []\n                            };\n                            \n                            // Reset the notes and tags\n                            this.notes = {};\n                            this.tags = {};\n                            \n                            // Update all flags\n                            await this.actor.setFlag(\"world\", \"relationships\", this.relationships);\n                            await this.actor.setFlag(\"world\", \"relationshipNotes\", this.notes);\n                            await this.actor.setFlag(\"world\", \"relationshipTags\", this.tags);\n                            \n                            ui.notifications.info(`Reset all relationships for ${this.actor.name}.`);\n                            this.render(false);\n                        } catch (error) {\n                            console.error(\"Error resetting relationships:\", error);\n                            ui.notifications.error(\"An error occurred while resetting relationships.\");\n                        }\n                    }\n                },\n                no: {\n                    icon: '<i class=\"fas fa-times\"></i>',\n                    label: \"Cancel\"\n                }\n            },\n            default: \"no\"\n        }).render(true);\n    }\n\n    async _deepCleanData() {\n        try {\n            // First unset all flags\n            await this.actor.unsetFlag(\"world\", \"relationships\");\n            await this.actor.unsetFlag(\"world\", \"relationshipNotes\");\n            await this.actor.unsetFlag(\"world\", \"relationshipTags\");\n\n            // Reset local data\n            this.relationships = {\n                chombatta: [],\n                ally: [],\n                partnerInCrime: [],\n                acquaintance: [],\n                neutral: [],\n                irritant: [],\n                rival: [],\n                adversary: [],\n                nemesis: [],\n                archNemesis: []\n            };\n            this.notes = {};\n            this.tags = {};\n\n            // Set clean data\n            await this.actor.setFlag(\"world\", \"relationships\", this.relationships);\n            await this.actor.setFlag(\"world\", \"relationshipNotes\", this.notes);\n            await this.actor.setFlag(\"world\", \"relationshipTags\", this.tags);\n\n            ui.notifications.info(`Cleaned all relationship data for ${this.actor.name}.`);\n            this.render(false);\n        } catch (error) {\n            console.error(\"Error cleaning data:\", error);\n            ui.notifications.error(\"An error occurred while cleaning relationship data.\");\n        }\n    }\n\n    // Remove Character\n    async _onRemoveCharacter(event) {\n        const charId = event.currentTarget.dataset.charId;\n        const category = event.currentTarget.closest('.category-row').dataset.category;\n\n        if (!category || !charId) {\n            ui.notifications.error(\"Failed to identify character or category for removal.\");\n            return;\n        }\n\n        try {\n            // Find and remove from relationships\n            Object.keys(this.relationships).forEach(cat => {\n                this.relationships[cat] = this.relationships[cat].filter(rel => rel.id !== charId);\n            });\n\n            // Also clean up tags and notes\n            delete this.tags[charId];\n            delete this.notes[charId];\n\n            // Update all the flags\n            await this.actor.setFlag(\"world\", \"relationships\", this.relationships);\n            await this.actor.setFlag(\"world\", \"relationshipNotes\", this.notes);\n            await this.actor.setFlag(\"world\", \"relationshipTags\", this.tags);\n\n            // Re-render the app\n            this.render(false);\n\n            // Notify success\n            ui.notifications.info(`Removed ${game.actors.get(charId)?.name || \"character\"} from relationships.`);\n        } catch (error) {\n            console.error(\"Error removing character:\", error);\n            ui.notifications.error(\"An error occurred while removing the character.\");\n        }\n    }\n\n    // Here are the value adjustment methods\n    async _adjustValue(event, amount) {\n        const container = $(event.currentTarget).closest(\".portrait-container\");\n        const charId = container.data(\"char-id\");\n        const currentCategory = container.closest('.category-row').data('category');\n        \n        if (!charId || !currentCategory) return;\n        \n        // Find the relationship in any category\n        let relationship = null;\n        let foundCategory = null;\n        \n        for (const [category, relationships] of Object.entries(this.relationships)) {\n            const found = relationships.find(rel => rel.id === charId);\n            if (found) {\n                relationship = found;\n                foundCategory = category;\n                break;\n            }\n        }\n        \n        if (relationship) {\n            // Calculate new value\n            let newValue = relationship.value + amount;\n            newValue = Math.max(-100, Math.min(100, newValue));\n            \n            // Remove from old category\n            this.relationships[foundCategory] = this.relationships[foundCategory].filter(rel => rel.id !== charId);\n            \n            // Find new category and add to it\n            const newCategory = this.getCategoryForValue(newValue);\n            relationship.value = newValue;\n            \n            if (!this.relationships[newCategory]) {\n                this.relationships[newCategory] = [];\n            }\n            this.relationships[newCategory].push(relationship);\n            \n            // Save and render\n            await this.actor.setFlag(\"world\", \"relationships\", this.relationships);\n            this.render(false);\n        }\n    }\n\n    async _onDecreaseValue(event) {\n        await this._adjustValue(event, -1);\n    }\n\n    async _onIncreaseValue(event) {\n        await this._adjustValue(event, 1);\n    }\n\n    async _onDecreaseValue10(event) {\n        await this._adjustValue(event, -10);\n    }\n\n    async _onIncreaseValue10(event) {\n        await this._adjustValue(event, 10);\n    }\n\n    async _onValueInputChange(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        \n        const container = $(event.currentTarget).closest(\".portrait-container\");\n        const charId = container.data(\"char-id\");\n        const category = container.closest(\".category-row\").data(\"category\");\n        \n        if (!charId || !category) return;\n        \n        let value = parseInt(event.currentTarget.value);\n        value = Math.max(-100, Math.min(100, value));\n        \n        const relationship = this.relationships[category].find(rel => rel.id === charId);\n        if (relationship) {\n            relationship.value = value;\n            await this.actor.setFlag(\"world\", \"relationships\", this.relationships);\n            this.render(false);\n        }\n    }\n\n    async _onQuickValue(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        \n        const container = $(event.currentTarget).closest(\".portrait-container\");\n        const charId = container.data(\"char-id\");\n        const currentCategory = container.closest('.category-row').data('category');\n        const value = parseInt(event.currentTarget.dataset.value);\n        \n        if (!charId || !currentCategory) return;\n        \n        // Find the relationship in any category\n        let relationship = null;\n        let foundCategory = null;\n        \n        for (const [category, relationships] of Object.entries(this.relationships)) {\n            const found = relationships.find(rel => rel.id === charId);\n            if (found) {\n                relationship = found;\n                foundCategory = category;\n                break;\n            }\n        }\n        \n        if (relationship) {\n            // Remove from old category\n            this.relationships[foundCategory] = this.relationships[foundCategory].filter(rel => rel.id !== charId);\n            \n            // Find new category and add to it\n            const newCategory = this.getCategoryForValue(value);\n            relationship.value = value;\n            \n            if (!this.relationships[newCategory]) {\n                this.relationships[newCategory] = [];\n            }\n            this.relationships[newCategory].push(relationship);\n            \n            // Save and render\n            await this.actor.setFlag(\"world\", \"relationships\", this.relationships);\n            this.render(false);\n        }\n    }\n\n    _onDragStart(event) {\n        const charId = event.currentTarget.dataset.charId;\n        event.dataTransfer.setData(\"text/plain\", charId);\n    }\n    _onDragOver(event) {\n        event.preventDefault();\n    }\n    async _onDrop(event) {\n        event.preventDefault();\n        const charId = event.dataTransfer.getData(\"text/plain\");\n        const targetCategory = event.currentTarget.dataset.category;\n\n        if (!charId || !targetCategory) return;\n\n        let relationship = null;\n        let sourceCategory = null;\n\n        for (const [category, relationships] of Object.entries(this.relationships)) {\n            const found = relationships.find(rel => rel.id === charId);\n            if (found) {\n                relationship = found;\n                sourceCategory = category;\n                break;\n            }\n        }\n\n        if (!relationship || !sourceCategory) return;\n\n        this.relationships[sourceCategory] = this.relationships[sourceCategory].filter(rel => rel.id !== charId);\n        this.relationships[targetCategory].push(relationship);\n\n        await this.actor.setFlag(\"world\", \"relationships\", this.relationships);\n        this.render(false);\n        ui.notifications.info(`Moved ${game.actors.get(charId).name} to ${targetCategory}.`);\n    }\n\n}\n\n// Macro to Initialize\nconst tokens = canvas.tokens.controlled;\nif (!tokens.length) {\n    ui.notifications.warn(\"Select a token to open the Relationship Tracker.\");\n} else {\n    const actor = tokens[0].actor;\n    if (actor) {\n        new RelationshipTrackerApp(actor).render(true);\n    } else {\n        ui.notifications.error(\"Selected token does not have an associated actor.\");\n    }\n}",
  "folder": null,
  "flags": {
    "condition-lab-triggler": {
      "macroTrigger": ""
    },
    "advanced-macros": {
      "runForSpecificUser": ""
    },
    "exportSource": {
      "world": "cyberpunkfantasy",
      "system": "cyberpunk-red-core",
      "coreVersion": "11.315",
      "systemVersion": "v0.88.2"
    }
  },
  "_stats": {
    "systemId": "cyberpunk-red-core",
    "systemVersion": "v0.88.2",
    "coreVersion": "11.315",
    "createdTime": 1732386858559,
    "modifiedTime": 1732387119247,
    "lastModifiedBy": "LWBSOic5NKC2pZDV"
  }
}